<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MIT6.828 OS实验学习笔记（一）</title>
    <link href="/2025/05/15/OS%E5%AE%9E%E9%AA%8C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2025/05/15/OS%E5%AE%9E%E9%AA%8C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="MIT6-828-OS实验学习笔记（一）"><a href="#MIT6-828-OS实验学习笔记（一）" class="headerlink" title="MIT6.828 OS实验学习笔记（一）"></a>MIT6.828 OS实验学习笔记（一）</h2><h6 id="前情提要：太想深入学习os有关的东西了"><a href="#前情提要：太想深入学习os有关的东西了" class="headerlink" title="前情提要：太想深入学习os有关的东西了"></a>前情提要：太想深入学习os有关的东西了</h6><h2 id="一、环境配置"><a href="#一、环境配置" class="headerlink" title="一、环境配置"></a>一、环境配置</h2><p>按照实验书指引：<a href="https://pdos.csail.mit.edu/6.828/2018/tools.html">https://pdos.csail.mit.edu/6.828/2018/tools.html</a></p><p>Ubuntu22.04：搭建起编译器相关的环境</p><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/master/img202505101550002.png" alt="image-20250102203816702"></p><p>QEMU模拟器：</p><p>（注意只能在python2下进行编译）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install libsdl1.2-dev libtool-bin libglib2.0-dev libz-dev libpixman-1-dev<br>git clone https://github.com/mit-pdos/6.828-qemu.git qemu<br>sudo apt install python2<br>ln -s /usr/bin/python2 /usr/bin/python<br>sudo su<br>cd qemu<br>./configure --disable-kvm --disable-werror --target-list=&quot;i386-softmmu x86_64-softmmu&quot;<br>make &amp;&amp; make install<br></code></pre></td></tr></table></figure><p><a href="https://github.com/yunwei37/6.828-2018-labs/blob/master/notes/%E5%B7%A5%E5%85%B7%E9%93%BE.md">https://github.com/yunwei37/6.828-2018-labs/blob/master/notes/%E5%B7%A5%E5%85%B7%E9%93%BE.md</a></p><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/master/img202505101550736.png" alt="image-20250102225250976"></p><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/master/img202505101550079.png" alt="image-20250103000242074"></p><h2 id="二、实验部分"><a href="#二、实验部分" class="headerlink" title="二、实验部分"></a>二、实验部分</h2><h3 id="Exercise1-qemu加载内核"><a href="#Exercise1-qemu加载内核" class="headerlink" title="Exercise1: qemu加载内核"></a>Exercise1: qemu加载内核</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd lab<br>make qemu<br></code></pre></td></tr></table></figure><h5 id="遇到了一个报错"><a href="#遇到了一个报错" class="headerlink" title="遇到了一个报错"></a>遇到了一个报错</h5><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smali">Triple fault. Halting for inspection via QEMU<span class="hljs-built_in"> monitor</span><br><span class="hljs-built_in"></span>解决方案：vim打开GNUMakefile，找到CFLAGS处，插入 `CFLAGS+=-fno-pic`<br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ruby">解决参考：<span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/stackoverflow.com/questions</span><span class="hljs-regexp">/47969315/mit</span>6-<span class="hljs-number">828</span>-jos-lab1-qemu-triple-fault<br><br>原因：自身的gcc在编译内核时多编译了一些程序，导致内核不能正常加载（？和memset有关），通过在makefile中加入编译选项 <span class="hljs-string">`-fno-pic`</span> 解决这个现象。<br><br>该编译选项的意思是禁止生成无关代码，用于动态链接；相反，<span class="hljs-variable constant_">PIC</span>是指编译时生成的代码不依赖于代码段的具体位置，例如.so文件就是通过<span class="hljs-variable constant_">PIC</span>编译的。<br><br>总而言之，因为引导程序是一个静态链接程序（？）<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/master/img202505101550481.png" alt="image-20250103004156433"></p><h3 id="Exercise2-使用-GDB-命令跟踪-ROM-BIOS-中的其他指令"><a href="#Exercise2-使用-GDB-命令跟踪-ROM-BIOS-中的其他指令" class="headerlink" title="Exercise2: 使用 GDB 命令跟踪 ROM BIOS 中的其他指令"></a>Exercise2: 使用 GDB 命令跟踪 ROM BIOS 中的其他指令</h3><h5 id="question：使用-GDB-si（单步指令）命令跟踪-ROM-BIOS-中的其他指令，并尝试猜测它可能在做什么。"><a href="#question：使用-GDB-si（单步指令）命令跟踪-ROM-BIOS-中的其他指令，并尝试猜测它可能在做什么。" class="headerlink" title="question：使用 GDB si（单步指令）命令跟踪 ROM BIOS 中的其他指令，并尝试猜测它可能在做什么。"></a>question：使用 GDB si（单步指令）命令跟踪 ROM BIOS 中的其他指令，并尝试猜测它可能在做什么。</h5><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cd</span> <span class="hljs-keyword">lab</span><br>make qemu-gdb<br><br># 另起一个终端<br><span class="hljs-keyword">cd</span> <span class="hljs-keyword">lab</span><br>make gdb<br></code></pre></td></tr></table></figure><p>这里需要注意qemu的tcp和 ~&#x2F;lab&#x2F;.gdbinit的监听端口一样。。我的qemu的tcp在25000但.gdbinit的default端口是26000，改一下就好了</p><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/master/img202505101551425.png" alt="image-20250104034452382"></p><p>可以看到先进入BIOS末尾的0xffff0处，距离0x0010000有16个字节。</p><h5 id="通过动调查看BIOS在做什么"><a href="#通过动调查看BIOS在做什么" class="headerlink" title="通过动调查看BIOS在做什么"></a>通过动调查看BIOS在做什么</h5><ol><li>先走完整个程序，看看kern“占用”了哪些内存。</li></ol><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/master/img202505101551127.png" alt="image-20250508005915862"></p><ol start="2"><li><p>gdb动态调试，对照PC地址分配进行猜测。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># 初始化架构<br># [f000:fff0]=0xf000*16+0xfff0=0xffff0<br># 0xffff0是BIOS复位向量地址，即CPU开机时从这里执行代码<br><br>[f000:fff0]    0xffff0:ljmp   $0xf000,$0xe05b<br>0x0000fff0 in ?? ()<br>+ symbol-file obj/kern/kernel<br>(gdb) si<br>[f000:e05b]    0xfe05b:cmpl   $0x0,%cs:0x6ac8<br><br>[f000:e076]    0xfe076:jmp    0xfd15c<br><br>[f000:d187]    0xfd187:ljmpl  $0x8,$0xfd18f<br>0x0000d187 in ?? ()<br>(gdb) <br>The target architecture is set to &quot;i386&quot;.<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># 进入了一个循环，关键地址为0xf0589<br># 这里的循环涉及到的地址段主要是0xefc70,对照PC内存布局<br>0xf0583:movsbl 0x0(%ebp),%edx<br>0xf0587:test   %dl,%dl<br>0xf0589:je     0xf0758           ; 字符串结束？<br>0xf058f:cmp    $0x25,%dl         ; &#x27;%&#x27;<br>0xf0592:jne    0xf0741           ; 如果不是 &#x27;%&#x27;, 继续下一个字符<br>0xf0741:mov    0x4(%esp),%eax<br>0xf0745:call   0xefc70<br>0xefc70:mov    %eax,%ecx<br>0xefc72:movsbl %dl,%edx<br>0xefc75:call   *(%ecx)<br>0xefc65:mov    %edx,%eax<br>0xefc67:mov    0xf693c,%dx<br>0xefc6e:out    %al,(%dx)<br>0xefc6f:ret    <br>0xefc77:ret    <br><br>......<br><br>(gdb) b *0xf0758<br>Breakpoint 1 at 0xf0758<br>(gdb) continue<br>Continuing.<br><br># 0xf0758内部也是一个循环<br># 主要涉及到的地址段：0xffff01d9，0xfffefe1b，0xefd75...<br>=&gt; 0xf0758:add    $0xc,%esp<br>Breakpoint 1, 0x000f0758 in ?? ()<br>(gdb) <br>Continuing.<br><br>=&gt; 0xf0758:add    $0xc,%esp<br>Breakpoint 1, 0x000f0758 in ?? ()<br>(gdb) si<br>=&gt; 0xf075b:pop    %ebx<br>...<br><br># 结束循环后。qemu模拟器中打印了一行信息，执行了BIOS的init函数并进入系统<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/master/img202505101551906.png" alt="image-20250510154852902"></p></li></ol><h3 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h3><h4 id="Windows-上的-ssh-命令"><a href="#Windows-上的-ssh-命令" class="headerlink" title="Windows 上的 ssh 命令"></a>Windows 上的 ssh 命令</h4><p>​ssh客户端：这是一个用于发起远程 SSH 连接的工具。Windows 内置了这个客户端，因此即使没有安装 OpenSSH Server（即 <code>sshd</code> 服务），你也可以使用 <code>ssh</code> 客户端连接到远程计算机。</p><p>​OpenSSH Server (<code>sshd</code>)：这是提供 SSH 服务的工具，允许计算机接收 SSH 连接。只有安装并启动了 <code>sshd</code> 服务，计算机才能充当 SSH 服务器，接受其他计算机的连接。</p><h4 id="汇编语言的内存模型"><a href="#汇编语言的内存模型" class="headerlink" title="汇编语言的内存模型"></a>汇编语言的内存模型</h4><p>tips：地址偏移与数据内容的单位通常时不一样的，涉及到数据时常使用的是bit；</p><ol><li><p>涉及到寻址时，x86机器的寻址单位是Byte；段寄存器CS&#x2F;段offset寄存器都是16bit的。</p></li><li><p>比如说：段基地址存储在CS中，为0x1000；段偏移值存储在BX中，为0xFFF0；那么要寻址的地方0x1000*0x10+0xFFF0&#x3D;0x1FFF0。</p></li><li><p>且由于段偏移寄存器是16bit的，所以寻址范围为64KB（2^16Bytes&#x3D;64KB）</p></li><li><p>汇编语言的内存模型映射了处理器的发展，包括寻址范围的扩张(从64KB-&gt;4GB)；</p><p>也包括了内存管理的发展:</p><ul><li>最初通过16bit的寄存器来存储段基址，得到了2^16&#x3D;64KB的寻址范围（比如说0x000F的段基址，0xFFF0的offset得到的是0xFFFF0的地址），其实这也就是所说的**”实模式“**。</li><li>上述对地址的操作，很容易就操作到OS的内存导致OS崩溃，于是提出了**”保护模式“**。80386处理器算是保护模式的里程碑式version。80386的CPU&amp;寄存器&amp;PC总线的都是32位，寻址范围来到了2^32&#x3D;4GB，其实这个时候已经抛弃了段寄存器的寻址方式，不过为了兼容实模式，80386处理器依然保留段基址寄存器CS（后面会提及）。</li><li>那么保护模式是怎么保护程序安全的呢？按照现代OS的内核来看，保护程序安全就是让程序只能访问有限的空间。那么就只需要<strong>规定内存能被哪些程序访问</strong>，需要一些数据结构来描述<strong>段的访问权限、段的特权、段的读写许可</strong>，也就是64bit的<strong>段描述符</strong>。段描述符是一段非常大的数据，所有的段描述符被写入全局描述符(GDT)中，在OS启动时被加载到内存中，CPU通过全局描述符寄存器(GDTR)来找到GDT。</li><li>在保护模式下，是怎么寻址的呢？前面提到的保留的段寄存器就存储了段选择符(GDT索引值)，通过段选择符在GDT中找到段描述符（保留着段基址），进而通过计算得到真实要访问的物理地址。</li><li>分段方式看起来很完美，显示应用中由于内存过于碎片化，频繁发生<strong>内存交换</strong>导致效率不高；</li><li>intel提出了分页机制(开始涉及到逻辑地址&amp;物理地址的转换)，将内存划分为每页4KB的大小，每个进程根据页表&amp;页进行寻址，如果为每个进程都分配一个页表（页表-&gt;页），4*2^20&#x3D;4M，将会消耗大量内存；</li><li>衍生了<strong>二级页表</strong>（页目录表-&gt;页表-&gt;页），进程的CR3寄存器存储了当前进程的页目录表的物理内存基址，只加载目标页到内存中。比如说，线性地址有32bit，高10bit即页目录表的索引，中间10bit为页表的索引，低12bit为偏移大小（2^12&#x3D;4KB，刚好等于页的大小）。</li></ul></li></ol><h5 id="实模式平面模型"><a href="#实模式平面模型" class="headerlink" title="实模式平面模型"></a>实模式平面模型</h5><h5 id="实模式段模型"><a href="#实模式段模型" class="headerlink" title="实模式段模型"></a>实模式段模型</h5><h5 id="保护模式平面模型"><a href="#保护模式平面模型" class="headerlink" title="保护模式平面模型"></a>保护模式平面模型</h5><h3 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h3><p>意识到学完这门课后是可以自己写&amp;编译一个OS内核的，所以还需要学习一下源码。另外还需要了解BIOS是怎么初始化内存布局&amp;程序是怎么被加载到内存中的。</p><h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><p><a href="https://www.cnblogs.com/xiaoniuhululu/p/18282033">https://www.cnblogs.com/xiaoniuhululu/p/18282033</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>llm辅助逆向</title>
    <link href="/2025/04/28/llm%E8%BE%85%E5%8A%A9%E9%80%86%E5%90%91/"/>
    <url>/2025/04/28/llm%E8%BE%85%E5%8A%A9%E9%80%86%E5%90%91/</url>
    
    <content type="html"><![CDATA[<h1 id="LLM辅助逆向初体验"><a href="#LLM辅助逆向初体验" class="headerlink" title="LLM辅助逆向初体验"></a>LLM辅助逆向初体验</h1><h2 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h2><ol><li><p>最近面试的时候，面试官问过，是否考虑使用大模型来辅助逆向。说实话真没试过，最多把关键程序扔给AI，让AI分析程序逻辑。刚好有个朋友说入门大模型的话，可以研究研究MCP。</p></li><li><p>从在GitHub上找到了<a href="https://github.com/LaurieWired/GhidraMCP">GhidraMCP</a>。环境搭建：</p><ul><li><p>python&gt;&#x3D;3.10，<code>pip install mcp</code></p></li><li><p>安装并注册Claude-desktop，作为MCP的客户端并配置config文件；</p></li><li><p>在Ghidra中安装MCP插件。</p></li></ul></li><li><p>MCP原理：<a href="https://modelcontextprotocol.io/quickstart/server">MCP</a>即Model Context Protocol（模型上下文协议），可以让AI与terminal进行对话的一个工具（有点类似于翻译）。</p><ul><li><p>比如说这里的<code>Claude-desktop</code>作为 <strong>MCP客户端</strong>，向MCP服务端发起对话；<code>bridge_mcp_ghidra.py</code>创建了<strong>MCP服务器</strong>，通过解析AI发送的指令后，调用对应的<code>mcp.tool()</code>，在<code>Ghidra</code>中执行，最后将结果通过MCP返回给AI。</p></li><li><p>流程图如下：</p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/master/img202504282100565.png" alt="image-20250428210051723" style="zoom:67%;" /></li></ul></li></ol><h2 id="二、ctf逆向尝试"><a href="#二、ctf逆向尝试" class="headerlink" title="二、ctf逆向尝试"></a>二、ctf逆向尝试</h2><p>在Ghidra中反编译一个文件（选了BuuCtf网站上的一道BabyCPP），让AI辅助解析：</p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/master/img202504282102017.png" alt="image-20250428210219861" style="zoom:67%;" /><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/master/img202504282033862.png" alt="image-20250428202404232" style="zoom:67%;" /><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/master/img202504282033068.png" alt="image-20250428202432891" style="zoom:67%;" /><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/master/img202504282034244.png" alt="image-20250428202450404" style="zoom:67%;" />]]></content>
    
    
    
    <tags>
      
      <tag>iOS逆向</tag>
      
      <tag>Android逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode刷题日常</title>
    <link href="/2025/04/25/leetcode%E5%88%B7%E9%A2%98%E6%97%A5%E5%B8%B8/"/>
    <url>/2025/04/25/leetcode%E5%88%B7%E9%A2%98%E6%97%A5%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<p>前情提要：最近找实习，被算法拷打麻木了（没想到安全岗也要写算法，更没想到自己还能被开发岗捞去面试TT，于是狠狠补习一波数据结构。。。），遂记录一些lc算法日常</p><h2 id="动态规划dp"><a href="#动态规划dp" class="headerlink" title="动态规划dp"></a>动态规划dp</h2><h3 id="爬楼梯问题"><a href="#爬楼梯问题" class="headerlink" title="爬楼梯问题"></a>爬楼梯问题</h3><p>问题：假设你正在爬楼梯。需要 <code>n</code> 阶你才能到达楼顶。每次你可以爬 <code>1</code> 或 <code>2</code> 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p>解析：本质其实是斐波那契数列：<code>f(n)=f(n-1)+f(n-2)</code></p><p>在走到第n步之前，可能走了(n-1)或者(n-2)步。</p><h4 id="解法一：递归-回溯"><a href="#解法一：递归-回溯" class="headerlink" title="解法一：递归&#x2F;回溯"></a>解法一：递归&#x2F;回溯</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">climbStairs</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> n;<br>  <span class="hljs-type">int</span> res+=<span class="hljs-built_in">climbStairs</span>(n<span class="hljs-number">-1</span>)+<span class="hljs-built_in">climbStairs</span>(n<span class="hljs-number">-2</span>);<br>  <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 优化版递归</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>  unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; memo; <span class="hljs-comment">// 用哈希表存储计算结果</span><br><br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">climbStairs</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> n; <span class="hljs-comment">// 递归终止</span><br>    <span class="hljs-keyword">if</span> (memo.<span class="hljs-built_in">find</span>(n) != memo.<span class="hljs-built_in">end</span>()) <span class="hljs-keyword">return</span> memo[n]; <span class="hljs-comment">// 查找缓存</span><br>    <span class="hljs-comment">// 递归计算并存储</span><br>    memo[n] = <span class="hljs-built_in">climbStairs</span>(n - <span class="hljs-number">1</span>) + <span class="hljs-built_in">climbStairs</span>(n - <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">return</span> memo[n];<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 使用回溯解决，n=44时，runtime error</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtrace</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> &amp;res,<span class="hljs-type">int</span> state,vector&lt;<span class="hljs-type">int</span>&gt; &amp;choices)</span></span>&#123;<br>  <span class="hljs-keyword">if</span>(state==n)&#123;<br>    res++;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;choice:choices)&#123;<br>    <span class="hljs-keyword">if</span>(state+choice&gt;n)&#123;<br>      <span class="hljs-keyword">continue</span>;  <span class="hljs-comment">// 如果步数超过了阶数</span><br>    &#125;<br>    <span class="hljs-built_in">backtrace</span>(n,res,state+choice,choices);<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">climbStairs</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>  <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>  <span class="hljs-type">int</span> state=<span class="hljs-number">0</span>; <span class="hljs-comment">// 当前步数</span><br>  vector&lt;<span class="hljs-type">int</span>&gt; choices=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;<br>  <span class="hljs-built_in">backtrace</span>(n,res,state,choices);<br>  <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="解法二：标准动态规划"><a href="#解法二：标准动态规划" class="headerlink" title="解法二：标准动态规划"></a>解法二：标准动态规划</h4><p>用一个<code>vector&lt;int&gt; dp</code>第n轮的结果，自底向上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">递推关系：<br>dp[<span class="hljs-number">3</span>]=dp[<span class="hljs-number">1</span>]+dp[<span class="hljs-number">2</span>]<br>dp[<span class="hljs-number">4</span>]=dp[<span class="hljs-number">3</span>]+dp[<span class="hljs-number">2</span>]<br>dp[n]=dp[n-<span class="hljs-number">1</span>]+dp[n-<span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">climbStairs</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> n;<br>  <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(n<span class="hljs-number">+1</span>)</span></span>;<br>  dp[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>,dp[<span class="hljs-number">2</span>]=<span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">3</span>;i&lt;=n;i++)&#123;<br>    dp[i]=dp[i<span class="hljs-number">-1</span>]+dp[i<span class="hljs-number">-2</span>];<br>  &#125;<br>  <span class="hljs-keyword">return</span> dp[n];<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="解法三：对解法二的优化"><a href="#解法三：对解法二的优化" class="headerlink" title="解法三：对解法二的优化"></a>解法三：对解法二的优化</h4><p>解法二引入了vector，空间复杂度为O(n)，考虑用常量来替换dp[i-1]&amp;dp[i-2]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">climbStairs</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> n;<br>  <span class="hljs-type">int</span> prev1=<span class="hljs-number">1</span>,prev2=<span class="hljs-number">2</span>;<br>  <span class="hljs-type">int</span> curr=<span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">3</span>;i&lt;=n;i++)&#123;<br>    curr=prev1+prev2;<br>    prev1=prev2;<br>    prev2=curr;<br>  &#125;<br>  <span class="hljs-keyword">return</span> prev2;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Crack-number"><a href="#Crack-number" class="headerlink" title="Crack number"></a>Crack number</h3><p>题目：现有一串神秘的密文 ciphertext，经调查，密文的特点和规则如下：</p><p>密文由非负整数组成<br>数字 0-25 分别对应字母 a-z<br>请根据上述规则将密文 ciphertext 解密为字母，并返回共有多少种解密结果。</p><p>解析：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs inform7">递推公式：<br>dp<span class="hljs-comment">[i]</span>+=dp<span class="hljs-comment">[i-1]</span>; <br>if(stoi(substr(i-2,2)))&gt;=10&amp;&amp;&lt;=25 &#123;<br> dp<span class="hljs-comment">[i]</span>+=dp<span class="hljs-comment">[i-2]</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>提供两种解法：第一种是新增数组，额外消耗空间n；另一种是增加常量空间</p><p>链接：<a href="https://leetcode.cn/leetbook/read/illustration-of-algorithm/99wd55/">https://leetcode.cn/leetbook/read/illustration-of-algorithm/99wd55/</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">crackNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> ciphertext)</span> </span>&#123;<br>    string cipher=<span class="hljs-built_in">to_string</span>(ciphertext);<br>    <span class="hljs-type">int</span> n=cipher.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// vector&lt;int&gt; dp(n+1,0);</span><br>    <span class="hljs-comment">// dp[0]=1,dp[1]=1;</span><br>    <span class="hljs-type">int</span> prev1=<span class="hljs-number">1</span>,prev2=<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> curr=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<br>      <span class="hljs-comment">// dp[i]+=dp[i-1];</span><br>      curr=prev2;<br>      <span class="hljs-type">int</span> two=(cipher[i<span class="hljs-number">-2</span>]-<span class="hljs-string">&#x27;0&#x27;</span>)*<span class="hljs-number">10</span>+cipher[i<span class="hljs-number">-1</span>]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>      <span class="hljs-comment">// if(two&gt;=10&amp;&amp;two&lt;=25) dp[i]+=dp[i-2];</span><br>      <span class="hljs-keyword">if</span>(two&gt;=<span class="hljs-number">10</span>&amp;&amp;two&lt;=<span class="hljs-number">25</span>) curr+=prev1;<br>      prev1=prev2;<br>      prev2=curr;<br>    &#125;<br><br>    <span class="hljs-comment">// return dp[n];</span><br>    <span class="hljs-keyword">return</span> curr;<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="二维dp：珠宝的最高价值"><a href="#二维dp：珠宝的最高价值" class="headerlink" title="二维dp：珠宝的最高价值"></a>二维dp：珠宝的最高价值</h3><p>题目：现有一个记作二维矩阵 frame 的珠宝架，其中 frame[i][j] 为该位置珠宝的价值。拿取珠宝的规则为：</p><p>只能从架子的左上角开始拿珠宝<br>每次可以移动到右侧或下侧的相邻位置<br>到达珠宝架子的右下角时，停止拿取<br>注意：珠宝的价值都是大于 0 的。除非这个架子上没有任何珠宝，比如 frame &#x3D; [[0]]。</p><p>链接：<a href="https://leetcode.cn/leetbook/read/illustration-of-algorithm/5vokvr/">https://leetcode.cn/leetbook/read/illustration-of-algorithm/5vokvr/</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">jewelleryValue</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; frame)</span> </span>&#123;<br>        <span class="hljs-comment">// 二维数组dp递推公式:dp[i][j]=max(dp[i][j-1]+frame[i][j],dp[i-1][j]+frame[i][j)</span><br>        <span class="hljs-comment">// 且第一行dp[0][j]的数字和第一列的数字是固定的</span><br>        <span class="hljs-type">int</span> i=frame.<span class="hljs-built_in">size</span>(),j=frame[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br><br>        <span class="hljs-comment">// 初始化第一行和第一列</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x=<span class="hljs-number">1</span>;x&lt;j;x++)&#123;<br>            frame[<span class="hljs-number">0</span>][x]=frame[<span class="hljs-number">0</span>][x<span class="hljs-number">-1</span>]+frame[<span class="hljs-number">0</span>][x];<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> y=<span class="hljs-number">1</span>;y&lt;i;y++)&#123;<br>            frame[y][<span class="hljs-number">0</span>]=frame[y<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]+frame[y][<span class="hljs-number">0</span>];<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x=<span class="hljs-number">1</span>;x&lt;i;x++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> y=<span class="hljs-number">1</span>;y&lt;j;y++)&#123;<br>                frame[x][y]=<span class="hljs-built_in">max</span>(frame[x][y<span class="hljs-number">-1</span>]+frame[x][y],frame[x<span class="hljs-number">-1</span>][y]+frame[x][y]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> frame[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h6 id="其实二叉树做多了，发现无非就是两种情况"><a href="#其实二叉树做多了，发现无非就是两种情况" class="headerlink" title="其实二叉树做多了，发现无非就是两种情况"></a>其实二叉树做多了，发现无非就是两种情况</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">1.确定遍历方法（前中后序遍历，前中后序遍历的倒序遍历，层序遍历）<br>2.决定对二叉树进行遍历后，又可以选择递归遍历/非递归遍历<br>3.当然也有二叉树的特性：二叉搜索树<br></code></pre></td></tr></table></figure><h3 id="二叉树层序遍历"><a href="#二叉树层序遍历" class="headerlink" title="二叉树层序遍历"></a>二叉树层序遍历</h3><p>题目：一棵圣诞树记作根节点为 <code>root</code> 的二叉树，节点值为该位置装饰彩灯的颜色编号。请按照从 <strong>左</strong> 到 <strong>右</strong> 的顺序返回每一层彩灯编号。</p><p>链接：<a href="https://leetcode.cn/leetbook/read/illustration-of-algorithm/7fs3j2/">https://leetcode.cn/leetbook/read/illustration-of-algorithm/7fs3j2/</a></p><p>思路：用栈实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">decorateRecord</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-comment">// 二叉树的层序遍历，用栈实现</span><br>        vector&lt;<span class="hljs-type">int</span>&gt; res;<br>        <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span> res;<br>        std:queue&lt;TreeNode*&gt; q;<br>        q.<span class="hljs-built_in">push</span>(root);<br>        <span class="hljs-type">int</span> size=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())&#123;<br>            size=q.<span class="hljs-built_in">size</span>();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br>                TreeNode *node=q.<span class="hljs-built_in">front</span>();<br>                q.<span class="hljs-built_in">pop</span>();<br>                res.<span class="hljs-built_in">push_back</span>(node-&gt;val);<br>                <span class="hljs-keyword">if</span>(node-&gt;left) q.<span class="hljs-built_in">push</span>(node-&gt;left);<br>                <span class="hljs-keyword">if</span>(node-&gt;right) q.<span class="hljs-built_in">push</span>(node-&gt;right);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="层序遍历其二"><a href="#层序遍历其二" class="headerlink" title="层序遍历其二"></a>层序遍历其二</h3><p>一棵圣诞树记作根节点为 <code>root</code> 的二叉树，节点值为该位置装饰彩灯的颜色编号。请按照从左到右的顺序返回每一层彩灯编号，每一层的结果记录于一行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">decorateRecord</span>(TreeNode* root) &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; res;<br>        <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span> res;<br>        <br>        std::queue&lt;TreeNode*&gt; q;<br>        q.<span class="hljs-built_in">push</span>(root);<br>        <span class="hljs-type">int</span> size=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())&#123;<br>            size=q.<span class="hljs-built_in">size</span>();<br>            std::vector&lt;<span class="hljs-type">int</span>&gt; tmp;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br>                TreeNode *node=q.<span class="hljs-built_in">front</span>();<br>                q.<span class="hljs-built_in">pop</span>();<br>                tmp.<span class="hljs-built_in">push_back</span>(node-&gt;val);<br>                <span class="hljs-keyword">if</span>(node-&gt;left) q.<span class="hljs-built_in">push</span>(node-&gt;left);<br>                <span class="hljs-keyword">if</span>(node-&gt;right) q.<span class="hljs-built_in">push</span>(node-&gt;right);<br>            &#125;<br>            res.<span class="hljs-built_in">push_back</span>(tmp);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="锯齿形层序遍历"><a href="#锯齿形层序遍历" class="headerlink" title="锯齿形层序遍历"></a>锯齿形层序遍历</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">decorateRecord</span>(TreeNode* root) &#123;<br>        <span class="hljs-comment">// 二叉树的锯齿形层次遍历，用bool来判断第n层的走势</span><br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; res;<br>        <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span> res;<br>        <span class="hljs-type">bool</span> walklr=<span class="hljs-literal">false</span>;  <span class="hljs-comment">// false表示自左向右</span><br>        std::queue&lt;TreeNode*&gt; q;<br>        q.<span class="hljs-built_in">push</span>(root);<br>        <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())&#123;<br>            <span class="hljs-type">int</span> size=q.<span class="hljs-built_in">size</span>();<br>            <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">tmp</span><span class="hljs-params">(size)</span></span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br>                TreeNode *node=q.<span class="hljs-built_in">front</span>();<br>                q.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-type">int</span> index=walklr?size-i<span class="hljs-number">-1</span>:i;<br>                tmp[index]=node-&gt;val;<br>                <span class="hljs-keyword">if</span>(node-&gt;left) q.<span class="hljs-built_in">push</span>(node-&gt;left);<br>                <span class="hljs-keyword">if</span>(node-&gt;right) q.<span class="hljs-built_in">push</span>(node-&gt;right);<br>            &#125;<br>            walklr=!walklr;<br>            res.<span class="hljs-built_in">push_back</span>(tmp);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二叉树的子结构"><a href="#二叉树的子结构" class="headerlink" title="二叉树的子结构"></a>二叉树的子结构</h3><p>题目：给定两棵二叉树 tree1 和 tree2，判断 tree2 是否以 tree1 的某个节点为根的子树具有 相同的结构和节点值 。<br>注意，空树 不会是以 tree1 的某个节点为根的子树具有 相同的结构和节点值 。</p><p>链接：<a href="https://leetcode.cn/leetbook/read/illustration-of-algorithm/7fyw1e/">https://leetcode.cn/leetbook/read/illustration-of-algorithm/7fyw1e/</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isSubStructure</span><span class="hljs-params">(TreeNode* A, TreeNode* B)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (A!=<span class="hljs-literal">nullptr</span>&amp;&amp;B!=<span class="hljs-literal">nullptr</span>)&amp;&amp;(<span class="hljs-built_in">rec</span>(A,B)||<span class="hljs-built_in">isSubStructure</span>(A-&gt;left,B)||<span class="hljs-built_in">isSubStructure</span>(A-&gt;right,B));<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">rec</span><span class="hljs-params">(TreeNode *A,TreeNode *B)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(B==<span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span>(A==<span class="hljs-literal">nullptr</span>||A-&gt;val!=B-&gt;val) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">rec</span>(A-&gt;left,B-&gt;left)&amp;&amp;<span class="hljs-built_in">rec</span>(A-&gt;right,B-&gt;right);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二叉树深度"><a href="#二叉树深度" class="headerlink" title="二叉树深度"></a>二叉树深度</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">calculateDepth</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> ld=<span class="hljs-number">1</span>+<span class="hljs-built_in">calculateDepth</span>(root-&gt;left);<br>        <span class="hljs-type">int</span> rd=<span class="hljs-number">1</span>+<span class="hljs-built_in">calculateDepth</span>(root-&gt;right);<br>        <span class="hljs-keyword">return</span> ld&gt;rd?ld:rd;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="判断平衡二叉树"><a href="#判断平衡二叉树" class="headerlink" title="判断平衡二叉树"></a>判断平衡二叉树</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isBalanced</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-comment">// 这是前序遍历的思路</span><br>        <span class="hljs-built_in">maxSub</span>(root);<br>        <span class="hljs-keyword">return</span> res;<br><br>        <span class="hljs-comment">// 当然也可以后序遍历</span><br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">bool</span> res=<span class="hljs-literal">true</span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxSub</span><span class="hljs-params">(TreeNode *root)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> ld=<span class="hljs-number">1</span>+<span class="hljs-built_in">maxSub</span>(root-&gt;left);<br>        <span class="hljs-type">int</span> rd=<span class="hljs-number">1</span>+<span class="hljs-built_in">maxSub</span>(root-&gt;right);<br>        <span class="hljs-keyword">if</span>(ld-rd&gt;=<span class="hljs-number">2</span>||rd-ld&gt;=<span class="hljs-number">2</span>) res=<span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> ld&gt;rd?ld:rd;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二叉树的序列化-反序列化"><a href="#二叉树的序列化-反序列化" class="headerlink" title="二叉树的序列化&amp;反序列化"></a>二叉树的序列化&amp;反序列化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Codec</span> &#123;<br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-comment">// Encodes a tree to a single string.</span><br>    <span class="hljs-function">string <span class="hljs-title">serialize</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-comment">// 层次遍历</span><br>        string res=<span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span> res;<br>        std::queue&lt;TreeNode*&gt; q;<br>        q.<span class="hljs-built_in">push</span>(root);<br>        <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())&#123;<br>            <span class="hljs-type">int</span> size=q.<span class="hljs-built_in">size</span>();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br>                TreeNode *node=q.<span class="hljs-built_in">front</span>();<br>                q.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-keyword">if</span>(!node)&#123;<br>                    <span class="hljs-comment">// 如果node==null</span><br>                    res+=<span class="hljs-string">&quot;n/&quot;</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    q.<span class="hljs-built_in">push</span>(node-&gt;left);<br>                    q.<span class="hljs-built_in">push</span>(node-&gt;right);<br>                    res+=<span class="hljs-built_in">to_string</span>(node-&gt;val);<br>                    res+=<span class="hljs-string">&quot;/&quot;</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-comment">// Decodes your encoded data to tree.</span><br>    <span class="hljs-function">TreeNode* <span class="hljs-title">deserialize</span><span class="hljs-params">(string data)</span> </span>&#123;<br>        TreeNode *head=<span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-keyword">if</span>(data.<span class="hljs-built_in">empty</span>()) <span class="hljs-keyword">return</span> head;<br><br>        <span class="hljs-comment">// 提取所有字符串</span><br>        vector&lt;string&gt; tokens;<br>        std::queue&lt;TreeNode*&gt; q;<br>        string token=<span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;ch:data)&#123;<br>            <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;/&#x27;</span>)&#123;<br>                tokens.<span class="hljs-built_in">push_back</span>(token);<br>                token=<span class="hljs-string">&quot;&quot;</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                token+=ch;<br>            &#125;<br>        &#125;<br>        <br>        TreeNode *root=<span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(<span class="hljs-built_in">stoi</span>(tokens[<span class="hljs-number">0</span>]));<br>        q.<span class="hljs-built_in">push</span>(root);<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())&#123;<br>            TreeNode *tmp=q.<span class="hljs-built_in">front</span>();<br>            q.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">if</span>(!tmp) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-comment">// 1.根据tokens，创建左右子节点；2.添加到root的左右；</span><br>            <span class="hljs-keyword">if</span>(i&lt;tokens.<span class="hljs-built_in">size</span>()&amp;&amp;tokens[i]!=<span class="hljs-string">&quot;n&quot;</span>)&#123;<br>                tmp-&gt;left=<span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(<span class="hljs-built_in">stoi</span>(tokens[i]));<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                tmp-&gt;left=<span class="hljs-literal">nullptr</span>;<br>            &#125;<br>            i++;<br>            q.<span class="hljs-built_in">push</span>(tmp-&gt;left);<br><br>            <span class="hljs-keyword">if</span>(i&lt;tokens.<span class="hljs-built_in">size</span>()&amp;&amp;tokens[i]!=<span class="hljs-string">&quot;n&quot;</span>)&#123;<br>                tmp-&gt;right=<span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(<span class="hljs-built_in">stoi</span>(tokens[i]));<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                tmp-&gt;right=<span class="hljs-literal">nullptr</span>;<br>            &#125;<br>            i++;<br>            q.<span class="hljs-built_in">push</span>(tmp-&gt;right);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// Your Codec object will be instantiated and called as such:</span><br><span class="hljs-comment">// Codec codec;</span><br><span class="hljs-comment">// codec.deserialize(codec.serialize(root));</span><br></code></pre></td></tr></table></figure><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h6 id="关键词：环形链表-双向链表-哨兵节点-随机复制"><a href="#关键词：环形链表-双向链表-哨兵节点-随机复制" class="headerlink" title="关键词：环形链表&#x2F;双向链表&#x2F;哨兵节点&#x2F;随机复制"></a>关键词：环形链表&#x2F;双向链表&#x2F;哨兵节点&#x2F;随机复制</h6><h3 id="随机链表的复制"><a href="#随机链表的复制" class="headerlink" title="随机链表的复制"></a>随机链表的复制</h3><p>题目：请实现 copyRandomList 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next 指针指向下一个节点，还有一个 random 指针指向链表中的任意节点或者 null。</p><p>链接：<a href="https://leetcode.cn/leetbook/read/illustration-of-algorithm/7fw58c/">https://leetcode.cn/leetbook/read/illustration-of-algorithm/7fw58c/</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">// Definition for a Node.</span><br><span class="hljs-comment">class Node &#123;</span><br><span class="hljs-comment">public:</span><br><span class="hljs-comment">    int val;</span><br><span class="hljs-comment">    Node* next;</span><br><span class="hljs-comment">    Node* random;</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    Node(int _val) &#123;</span><br><span class="hljs-comment">        val = _val;</span><br><span class="hljs-comment">        next = NULL;</span><br><span class="hljs-comment">        random = NULL;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">Node* <span class="hljs-title">copyRandomList</span><span class="hljs-params">(Node* head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(!head) <span class="hljs-keyword">return</span> head;<br>        unordered_map&lt;Node*,Node*&gt; mymap;<br>        Node *curr=head;<br>        <span class="hljs-keyword">while</span>(curr)&#123;<br>            Node *newnd=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(curr-&gt;val);<br>            mymap[curr]=newnd;<br>            curr=curr-&gt;next;<br>        &#125;<br>        curr=head;<br>        <span class="hljs-keyword">while</span>(curr)&#123;<br>            mymap[curr]-&gt;next=mymap[curr-&gt;next];<br>            mymap[curr]-&gt;random=mymap[curr-&gt;random];<br>            curr=curr-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> mymap[head];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="链表相交"><a href="#链表相交" class="headerlink" title="链表相交"></a>链表相交</h3><p>题目：某教练同时带教两位学员，分别以链表 l1、l2 记录了两套核心肌群训练计划，节点值为训练项目编号。两套计划仅有前半部分热身项目不同，后续正式训练项目相同。请设计一个程序找出并返回第一个正式训练项目编号。如果两个链表不存在相交节点，返回 null 。</p><p>链接：<a href="https://leetcode.cn/leetbook/read/illustration-of-algorithm/7fvoq2/">https://leetcode.cn/leetbook/read/illustration-of-algorithm/7fvoq2/</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode *<span class="hljs-title">getIntersectionNode</span><span class="hljs-params">(ListNode *headA, ListNode *headB)</span> </span>&#123;<br>        ListNode *tmpA=headA;<br>        ListNode *tmpB=headB;<br>        <span class="hljs-keyword">while</span>(tmpA!=tmpB)&#123;<br>            tmpA=tmpA?tmpA-&gt;next:headB;<br>            tmpB=tmpB?tmpB-&gt;next:headA;<br>        &#125;<br>        <span class="hljs-keyword">return</span> tmpA;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从chomper-lief浅析MachO文件结构</title>
    <link href="/2025/01/20/%E4%BB%8Echomper-lief%E6%B5%85%E6%9E%90MachO%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/"/>
    <url>/2025/01/20/%E4%BB%8Echomper-lief%E6%B5%85%E6%9E%90MachO%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="从chomper-lief浅析Mach-O文件结构"><a href="#从chomper-lief浅析Mach-O文件结构" class="headerlink" title="从chomper-lief浅析Mach-O文件结构"></a>从chomper-lief浅析Mach-O文件结构</h1><h6 id="我们都知道，c-程序在执行前会先初始化环境再进入main函数，换而言之，main函数并不是真正意义上的“程序入口点”"><a href="#我们都知道，c-程序在执行前会先初始化环境再进入main函数，换而言之，main函数并不是真正意义上的“程序入口点”" class="headerlink" title="我们都知道，c++程序在执行前会先初始化环境再进入main函数，换而言之，main函数并不是真正意义上的“程序入口点”"></a>我们都知道，c++程序在执行前会先初始化环境再进入main函数，换而言之，main函数并不是真正意义上的“程序入口点”</h6><h3 id="程序加载"><a href="#程序加载" class="headerlink" title="程序加载"></a>程序加载</h3><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimage-20250116001320311.png" alt="image-20250116001320311" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimage-20250116011301392.png" alt="image-20250116011301392" style="zoom:50%;" /><h3 id="MachO文件结构"><a href="#MachO文件结构" class="headerlink" title="MachO文件结构"></a>MachO文件结构</h3><p>在使用chomper模拟执行文件时遇到了一些bug，感觉可能是环境的问题（android的unidbg也经常出现环境问题。。）</p><p>遂通过chomper研究一下unicorn是怎么读取MachO文件以及.dylib的加载流程，顺带还可以通过lief更细致观察MachO的文件结构</p><h4 id="dylib加载"><a href="#dylib加载" class="headerlink" title=".dylib加载"></a>.dylib加载</h4><p>可以看到在chomper通过lief读取.dylib文件（？unicorn没有接口可以读取吗）；按<strong>顺序</strong>加载了<strong>共享缓存库</strong></p><p>lief需要先确认文件格式为 <code>lief.MachO.BinaryCommand</code> 才能进行解析；</p><p>当我尝试加入自己的.dylib进行解析时，lief读取文件格式为 <code>lief.MachO.BinaryNone</code> ，unicorn就不能正常解析文件。</p><p>通过对比两个文件的结构，发现我自己Xcode目录下导出来的.dylib文件缺少了部分结构（主要是chomper的.dylib文件在command部分之后还有一段LC_DYLD_INFO_ONLY::Binding info，而我编译的.dylib缺少了LC_DYLD_INFO_ONLY）</p><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimage-20250118153109346.png" alt="chomper_dylib"></p><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimage-20250118155719742.png" alt="my_dylib"></p><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimage-20250118161331579.png" alt="diff_from_2_dylib"></p><h4 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h4><h6 id="部分不再详细赘述，仅详细解释struct参数"><a href="#部分不再详细赘述，仅详细解释struct参数" class="headerlink" title="部分不再详细赘述，仅详细解释struct参数"></a>部分不再详细赘述，仅详细解释struct参数</h6><h5 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h5><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimage-20250118171702287.png" alt="headers_struct"></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-comment">// flag标签</span><br>flags为不同的文件标签的组合，每个标签占一个位，可以用位或来进行组合，常见的标签有:<br><span class="hljs-symbol">MH_NOUNDEFS:</span> 该文件没有未定义的引用<br><span class="hljs-symbol">MH_DYLDLINK:</span> 该文件将要作为动态链接器的输入，不能再被静态链接器修改<br><span class="hljs-symbol">MH_TWOLEVEL:</span> 该文件使用两级名字空间绑定<br><span class="hljs-symbol">MH_PIE:</span> 可执行文件会被加载到随机地址，只对MH_EXECUTE有效<br></code></pre></td></tr></table></figure><h5 id="Commads-Segment-Section"><a href="#Commads-Segment-Section" class="headerlink" title="Commads+Segment+Section"></a>Commads+Segment+Section</h5><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimage-20250118180346146.png" alt="image-20250118180346146"></p><h6 id="sections的含义参照上图"><a href="#sections的含义参照上图" class="headerlink" title="sections的含义参照上图"></a>sections的含义参照上图</h6><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimage-20250118180655608.png" alt="sections"></p><h5 id="Symbols符号表"><a href="#Symbols符号表" class="headerlink" title="Symbols符号表"></a>Symbols符号表</h5><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimage-20250118181000510.png" alt="symbols" style="zoom:67%;" /><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h4 id="关于LC-DYLD-INFO-ONLY"><a href="#关于LC-DYLD-INFO-ONLY" class="headerlink" title="关于LC_DYLD_INFO_ONLY"></a>关于LC_DYLD_INFO_ONLY</h4><h5 id="具体参数如下图"><a href="#具体参数如下图" class="headerlink" title="具体参数如下图"></a>具体参数如下图</h5><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimage-20250118202004378.png" alt="image-20250118202004378" style="zoom:67%;" /><h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><p><a href="https://www.jianshu.com/p/95896fb96a03">https://www.jianshu.com/p/95896fb96a03</a></p><p><a href="https://evilpan.com/2020/09/06/macho-inside-out/">https://evilpan.com/2020/09/06/macho-inside-out/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>iOS逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Zygisk</title>
    <link href="/2025/01/13/Zygisk/"/>
    <url>/2025/01/13/Zygisk/</url>
    
    <content type="html"><![CDATA[<h2 id="Zygisk"><a href="#Zygisk" class="headerlink" title="Zygisk"></a>Zygisk</h2><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>Zygisk命名非常形象，意思是<strong>注入Zygote后的Magisk</strong>。它能为Magisk模块，提供<strong>更深入、更强悍</strong>的修改能力。它有一个排除列表，可以撤销Magisk做的所有修改。这样你就能手动划定，模块起作用的范围。<strong>不能避免root被检测到</strong>，没有任何隐藏作用。即使你把某些程序加入排除列表，它们依旧可以发现Zygisk。如果用户要隐藏root，只能借助其他方式，比如<strong>添加Shamiko模块</strong>。</p><p>magisk的原理是劫持程序的app_process，app_process用来启动app_runtime，app_process有四个参数:zygote,system-server,application,nice-name</p><p>app_runtime在libandroid_runtime的AndroidRuntime中实现，AndroidRuntime先初始化JVM虚拟机，然后进入ZygoteInit或者RuntimeInit，这取决于传入main函数的是哪个类名</p><h4 id="zygisk原理"><a href="#zygisk原理" class="headerlink" title="zygisk原理"></a>zygisk原理</h4><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimage-20250110165614883.png" alt="image-20250110165614883" style="zoom:67%;" /><h5 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h5><p><a href="https://gist.github.com/5ec1cff/bfe06429f5bf1da262c40d0145e9f190#file-zygisk-md">https://gist.github.com/5ec1cff/bfe06429f5bf1da262c40d0145e9f190#file-zygisk-md</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// native/jni/core/module.cpp</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">magic_mount</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// Mount on top of modules to enable zygisk</span><br>    <span class="hljs-keyword">if</span> (zygisk_enabled) &#123;<br>        string zygisk_bin = MAGISKTMP + <span class="hljs-string">&quot;/&quot;</span> ZYGISKBIN; <span class="hljs-comment">// /sbin/.magisk/zygisk 或 /dev/xxx/.magisk/zygisk</span><br>        <span class="hljs-built_in">mkdir</span>(zygisk_bin.<span class="hljs-built_in">data</span>(), <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">mount_zygisk</span>(<span class="hljs-number">32</span>)<br>        <span class="hljs-built_in">mount_zygisk</span>(<span class="hljs-number">64</span>)<br>    &#125;<br>&#125;<br><span class="hljs-comment">//得到zygisk的路径，调用mount_zygisk进行挂载</span><br><br><span class="hljs-comment">// native/jni/core/module.cpp</span><br><br><span class="hljs-comment">//在函数mount_zygisk(bit)中，将magisk的app_process复制到zygisk的目录下（？理解为假目录），然后挂载到/system/bin/app_process的目录下，这样运行时用的就是magisk的app_process</span><br><br><br><br><span class="hljs-type">int</span> app_process_32 = <span class="hljs-number">-1</span>;<br><span class="hljs-type">int</span> app_process_64 = <span class="hljs-number">-1</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> mount_zygisk(bit)                                                               \</span><br><span class="hljs-meta"><span class="hljs-keyword">if</span> (access(<span class="hljs-string">&quot;/system/bin/app_process&quot;</span> #bit, F_OK) == 0) &#123;                                \</span><br><span class="hljs-meta">    app_process_##bit = xopen(<span class="hljs-string">&quot;/system/bin/app_process&quot;</span> #bit, O_RDONLY | O_CLOEXEC);    \</span><br><span class="hljs-meta">    string zbin = zygisk_bin + <span class="hljs-string">&quot;/app_process&quot;</span> #bit;                                     \</span><br><span class="hljs-meta">    string mbin = MAGISKTMP + <span class="hljs-string">&quot;/magisk&quot;</span> #bit;                                           \</span><br><span class="hljs-meta">    int src = xopen(mbin.data(), O_RDONLY | O_CLOEXEC);                                 \</span><br><span class="hljs-meta">    int out = xopen(zbin.data(), O_CREAT | O_WRONLY | O_CLOEXEC, 0);                    \</span><br><span class="hljs-meta">    xsendfile(out, src, nullptr, INT_MAX);                                              \</span><br><span class="hljs-meta">    close(src);                                                                         \</span><br><span class="hljs-meta">    close(out);                                                                         \</span><br><span class="hljs-meta">    clone_attr(<span class="hljs-string">&quot;/system/bin/app_process&quot;</span> #bit, zbin.data());                            \</span><br><span class="hljs-meta">    bind_mount(zbin.data(), <span class="hljs-string">&quot;/system/bin/app_process&quot;</span> #bit);                            \</span><br><span class="hljs-meta">&#125;</span><br><br><br></code></pre></td></tr></table></figure><p>以上操作是在magisk进程时，挂载magisk到zygisk；接下来通过magiskd的进程号，启动zygisk服务，zygisk的client接收到一些信号后，要做的就是将.so文件注入</p><p>那如何将so注入呢，简单来说就是通过fd找到当前进程，关闭当前进程，设置LD_PRELOAD环境-添加zygisk的.so文件，再次启动进程。（涉及网络通信）</p><p>LD_PRELOAD的作用是<strong>在程序运行前，将指定的共享库加载到程序的内存中</strong>。</p><p>注入后，要考虑的就是zygisk的init和entry了。</p><p><strong>为什么zygisk能够隐藏自身的进程</strong>？这需要学习一下zygote的工作方式。</p><h4 id="zygote-pre-fork线程池"><a href="#zygote-pre-fork线程池" class="headerlink" title="zygote pre-fork线程池"></a>zygote pre-fork线程池</h4><h5 id="参考博客-1"><a href="#参考博客-1" class="headerlink" title="参考博客"></a>参考博客</h5><p>android加载：<a href="https://blog.csdn.net/luansxx/article/details/120856581">https://blog.csdn.net/luansxx/article/details/120856581</a></p><p><a href="https://blog.csdn.net/zhangsunyucong/article/details/53896197">https://blog.csdn.net/zhangsunyucong/article/details/53896197</a></p><p><a href="https://blog.csdn.net/zhzhangnews/article/details/109294313">https://blog.csdn.net/zhzhangnews/article/details/109294313</a></p><p><a href="https://blog.csdn.net/yangfengxiao/article/details/131802875">https://blog.csdn.net/yangfengxiao/article/details/131802875</a></p><p>zygote预先fork多个进程监听usap_pool_primary的socket；启动应用时，system_server向usap_pool_primary的socket发送信息；usap收到消息后，唤醒一个进程来处理。</p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimage-20250113201930795.png" alt="image-20250113201930795" style="zoom: 67%;" /><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimage-20250113212548799.png" alt="image-20250113212548799" style="zoom:50%;" /><h4 id="Zygisk-entry"><a href="#Zygisk-entry" class="headerlink" title="Zygisk- entry"></a>Zygisk- entry</h4><h5 id="一阶段：实现-so的隐藏-dlopen加载后remap"><a href="#一阶段：实现-so的隐藏-dlopen加载后remap" class="headerlink" title="一阶段：实现.so的隐藏-dlopen加载后remap"></a>一阶段：实现.so的隐藏-dlopen加载后remap</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">first_stage_entry</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-comment">// 根据LD_PRELOAD 设置path，决定后续dlopen的加载第二阶段</span><br>  path=...;<br>  ...<br>  <span class="hljs-built_in">sanitize_environ</span>();  <span class="hljs-comment">//确保进程的环境变量存储在一块连续的内存区域中</span><br>...<br>    <span class="hljs-built_in">setenv</span>(INJECT_ENV_2, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-type">void</span> *handle = <span class="hljs-built_in">dlopen</span>(path, RTLD_LAZY);  <span class="hljs-comment">//加载zygisk.app_process.[32|64].2.so</span><br>    <span class="hljs-built_in">remap_all</span>(path);<span class="hljs-comment">// 重新映射当前内存区域存储的数据，程序可以在逻辑上脱离文件系统依赖，做到隐藏.so</span><br>    ...<br>    <span class="hljs-built_in">second_stage</span>(handle, tmp, path);<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="二阶段：对zygote的hook"><a href="#二阶段：对zygote的hook" class="headerlink" title="二阶段：对zygote的hook"></a>二阶段：对zygote的hook</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">second_stage_entry</span><span class="hljs-params">(<span class="hljs-type">void</span> *handle, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *tmp, <span class="hljs-type">char</span> *path)</span> </span>&#123;<br>...<br>    <span class="hljs-built_in">hook_functions</span>();<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>想要模块起作用，就需要在fork前进行修改</p><p>zygote的fork主要在于forkAndSpecialize和forkSystemServer，所以只要在这两个函数执行前进行fork就可以做到控制process。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HookContext::fork_pre</span><span class="hljs-params">()</span> </span>&#123;<br>    g_ctx = <span class="hljs-keyword">this</span>;<br>    <span class="hljs-built_in">sigmask</span>(SIG_BLOCK, SIGCHLD); <span class="hljs-comment">//屏蔽该信号可以使父进程在fork期间忽略来自子进程的信号，防止过早地干扰父进程的执行。</span><br>    pid = <span class="hljs-built_in">old_fork</span>(); <span class="hljs-comment">// 用来复制当前进程，创建一个子进程。</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HookContext::nativeForkSystemServer_pre</span><span class="hljs-params">()</span> </span>&#123;<br>    fork_pre();<br>    flags[SERVER_SPECIALIZE] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">// pid==0表示在子进程中</span><br>        <span class="hljs-built_in">ZLOGV</span>(<span class="hljs-string">&quot;pre  forkSystemServer\n&quot;</span>);<br>        <span class="hljs-built_in">run_modules_pre</span>(<span class="hljs-built_in">remote_get_info</span>(<span class="hljs-number">1000</span>, <span class="hljs-string">&quot;system_server&quot;</span>, &amp;info));<br>        <span class="hljs-built_in">close_fds</span>();<br>        <span class="hljs-built_in">android_logging</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HookContext::nativeForkAndSpecialize_pre</span><span class="hljs-params">()</span> </span>&#123;<br>    fork_pre();<br>    flags[FORK_AND_SPECIALIZE] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">nativeSpecializeAppProcess_pre</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>内核</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unidbg去某手游ollvm混淆-控制流平坦化篇</title>
    <link href="/2024/11/25/Unidbg%E5%8E%BB%E6%9F%90%E6%89%8B%E6%B8%B8ollvm%E6%B7%B7%E6%B7%86-%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96%E7%AF%87/"/>
    <url>/2024/11/25/Unidbg%E5%8E%BB%E6%9F%90%E6%89%8B%E6%B8%B8ollvm%E6%B7%B7%E6%B7%86-%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="Unidbg去某手游ollvm混淆-控制流平坦化篇"><a href="#Unidbg去某手游ollvm混淆-控制流平坦化篇" class="headerlink" title="Unidbg去某手游ollvm混淆-控制流平坦化篇"></a>Unidbg去某手游ollvm混淆-控制流平坦化篇</h2><h3 id="控制流平坦化原理"><a href="#控制流平坦化原理" class="headerlink" title="控制流平坦化原理"></a>控制流平坦化原理</h3><ol><li><p>控制流平坦化主要依靠&lt;主分发器和子分发器&gt;来控制基本块的走向；</p></li><li><p>另一个重要概念，控制流平坦化是基于switch-case进行分发的，即 为每一个基本块提供一个case，当满足case条件时就跳转，于是又衍生了trueBlock和selectBlock。</p></li><li><p>而我们要做的就是patch selectBlock，使其直接在结尾直接跳转到下一个trueBlock，而非回到主分发器寻找下一个Block。</p></li><li><p>在IDA中，控制流平坦化反汇编的效果并不是一个大的switch- case，而是被优化成了多层if-else。</p></li></ol><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimgimg-20241122210010.png" alt="antiasm_belike"></p><h3 id="去控制流平坦化"><a href="#去控制流平坦化" class="headerlink" title="去控制流平坦化"></a>去控制流平坦化</h3><h5 id="1-原理"><a href="#1-原理" class="headerlink" title="1.  原理"></a>1.  原理</h5><p>根据编译效果来看，判断真实块时，会出现 <code>b.eq</code>  这个关键指令；</p><p>当会出现条件分支块（<code>csel</code> ），<code>csel</code> 的下一个指令 <code>b</code> 会跳转回主分发器；这个给 <code>w8</code>的赋值的指令决定了下一个基本块 <code>cmp w8,wK</code>  跳往何处。</p><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimage-20241123175201386.png" alt="image-20241123175201386"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">去混淆原理：<br><span class="hljs-bullet">1.</span> 指令入栈<br><span class="hljs-bullet">2.</span> 回溯指令栈，如果栈顶指令等于 <span class="hljs-code">` b.eq  loc_addr`</span> ，往前回溯直到cmp指令，如果是 <span class="hljs-code">`cmp x8,xk`</span>，记录为trueBlock<br><span class="hljs-bullet">3.</span> 回溯指令栈，如果栈顶指令等于<span class="hljs-code">`  b  loc_addr`</span> ，回溯上一条指令是否csel，如果是，建立selectBlock，然后寻找条件成立/不成立对应的基本块<br><span class="hljs-bullet">4.</span> patch思路：selectBlock的上一个基本块必然是b.eq结尾的真实块1，计算出selectBlock跳转回主分发器后执行的真实块2，将selectBlock的结尾patch为真实块2（由于是一个选择分支，需要两条patch指令：b.cond/ b）<br></code></pre></td></tr></table></figure><p>画图表达一下思路</p><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimage-20241125233546037.png" alt="image-20241125233546037"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs assembly">// 以wk为参照的真实块：<br><br>ture block index 3202b1a5,target addr 6b900<br>ture block index 3e4de33f,target addr 6b900<br>ture block index 3202b1a5,target addr 6b900<br>ture block index 2e46c7ef,target addr 6b900<br>ture block index 58f48322,target addr 6b900<br><br>ture block index 58f48322,target addr 6b798<br>ture block index 5b8c9271,target addr 6b798<br>ture block index 69eefd37,target addr 6b798<br>ture block index 58f48322,target addr 6b798<br>ture block index 10,target addr 6b798<br><br>ture block index 5b8c9271,target addr 6b860<br>ture block index 69eefd37,target addr 6b860<br>ture block index 58f48322,target addr 6b860<br><br>ture block index 59aa634,target addr 6b6f0<br>ture block index 207cf6fc,target addr 6b6f0<br>ture block index 2e46c7ef,target addr 6b6f0<br>ture block index 58f48322,target addr 6b6f0<br><br>ture block index 207cf6fc,target addr 6b834<br>ture block index 2e46c7ef,target addr 6b834<br>ture block index 58f48322,target addr 6b834<br><br>ture block index 3e4de33f,target addr 6b998<br>ture block index 3e4de33f,target addr 6b998<br>ture block index 3202b1a5,target addr 6b998<br>ture block index 2e46c7ef,target addr 6b998<br>ture block index 58f48322,target addr 6b998<br><br><br>// 以w8为index的真实块：<br>ture block index 3202b1a5,target addr 6b900<br>ture block index 3202b1a5,target addr 6b900<br>ture block index 3202b1a5,target addr 6b900<br>ture block index 3202b1a5,target addr 6b900<br>ture block index 3202b1a5,target addr 6b900<br><br>ture block index 58f48322,target addr 6b798<br>ture block index 58f48322,target addr 6b798<br>ture block index 58f48322,target addr 6b798<br>ture block index 58f48322,target addr 6b798<br>ture block index 0,target addr 6b798<br><br>ture block index 5b8c9271,target addr 6b860<br>ture block index 5b8c9271,target addr 6b860<br>ture block index 5b8c9271,target addr 6b860<br><br>ture block index 59aa634,target addr 6b6f0<br>ture block index 59aa634,target addr 6b6f0<br>ture block index 59aa634,target addr 6b6f0<br>ture block index 59aa634,target addr 6b6f0<br><br>ture block index 207cf6fc,target addr 6b834<br>ture block index 207cf6fc,target addr 6b834<br>ture block index 207cf6fc,target addr 6b834<br><br>ture block index 3e4de33f,target addr 6b998<br>ture block index 3e4de33f,target addr 6b998<br>ture block index 3e4de33f,target addr 6b998<br>ture block index 3e4de33f,target addr 6b998<br>ture block index 3e4de33f,target addr 6b998<br></code></pre></td></tr></table></figure><h5 id="2-去混淆效果"><a href="#2-去混淆效果" class="headerlink" title="2.  去混淆效果"></a>2.  去混淆效果</h5><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimage-20241125230934894.png" alt="image-20241125230934894"></p><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimage-20241125230839030.png" alt="image-20241125230839030"></p><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimgimage-20241125230901535.png" alt="image-20241125230901535"></p><h5 id="3-总结"><a href="#3-总结" class="headerlink" title="3.  总结"></a>3.  总结</h5><p>(1). 控制流平坦化的去混淆代码简单，不需要像间接跳转一样多次patch；但去控制流平坦化的代码难以理解</p><p>(2). 在这次AntiOllvm中，多次都是手动修改寄存器的值以执行未走过的分支，为了更优雅地去混淆，应该多做一些自动化处理</p><p>(3). 改进思路：dump下混淆函数，回溯指令栈，对比于混淆函数，得到指令栈未执行过的地址；交叉引用（在代码中应该是回溯），查看该地址的调用链，自动化进行寄存器的patch…</p>]]></content>
    
    
    
    <tags>
      
      <tag>Android逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unidbg去某手游ollvm混淆-间接跳转篇</title>
    <link href="/2024/11/22/Unidbg%E5%8E%BB%E6%9F%90%E6%89%8B%E6%B8%B8ollvm%E6%B7%B7%E6%B7%86-%E9%97%B4%E6%8E%A5%E8%B7%B3%E8%BD%AC%E7%AF%87/"/>
    <url>/2024/11/22/Unidbg%E5%8E%BB%E6%9F%90%E6%89%8B%E6%B8%B8ollvm%E6%B7%B7%E6%B7%86-%E9%97%B4%E6%8E%A5%E8%B7%B3%E8%BD%AC%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="Unidbg去某手游ollvm混淆-间接跳转篇"><a href="#Unidbg去某手游ollvm混淆-间接跳转篇" class="headerlink" title="Unidbg去某手游ollvm混淆-间接跳转篇"></a>Unidbg去某手游ollvm混淆-间接跳转篇</h2><h3 id="模拟器init"><a href="#模拟器init" class="headerlink" title="模拟器init"></a>模拟器init</h3><ol><li><p>用vm.loadlibrary去加载libc.so等系统库会出错；将sdk版本改成23就可以自动加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//      memory.setLibraryResolver(new AndroidResolver(26));</span><br><span class="hljs-comment">// 加载动态库：这样加载会出错。将sdk设置为23版本，可以自动加载内存库</span><br><span class="hljs-comment">//        vm.loadLibrary(new File(&quot;path_to_ld-android.so&quot;),false);</span><br><span class="hljs-comment">//        vm.loadLibrary(new File(&quot;path_to_libc.so&quot;),false);</span><br><span class="hljs-comment">//        vm.loadLibrary(new File(&quot;path_to_libm.so&quot;),false);</span><br><span class="hljs-comment">//        vm.loadLibrary(new File(&quot;path_to_libstdc++.so&quot;),false);</span><br><span class="hljs-comment">//        vm.loadLibrary(new File(&quot;path_to_libdl.so&quot;),false);</span><br><br>memory.setLibraryResolver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AndroidResolver</span>(<span class="hljs-number">23</span>));<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimage-20241108173012255.png" alt="image-20241108173012255"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//  一些接口的继承关系：</span><br><span class="hljs-comment">//  interface：多继承</span><br><span class="hljs-comment">//  abstract class/ 泛型类</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Emulator</span>&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">NewFileIO</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Closeable</span>, ArmDisassembler, Serializable &#123;<br>    ......<br>    Backend <span class="hljs-title function_">getBackend</span><span class="hljs-params">()</span>;<br>    &#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">NewFileIO</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FileIO</span> &#123;<br>......<br>   <span class="hljs-type">boolean</span> <span class="hljs-title function_">canRead</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractEmulator</span>&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">NewFileIO</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Emulator</span>&lt;T&gt;, MemoryWriteListener &#123;<br>......<br><span class="hljs-keyword">public</span> Backend <span class="hljs-title function_">getBackend</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> backend;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h3 id="间接跳转"><a href="#间接跳转" class="headerlink" title="间接跳转"></a>间接跳转</h3><h5 id="1-关键指令-br-x9"><a href="#1-关键指令-br-x9" class="headerlink" title="1.  关键指令 br x9"></a>1.  关键指令 <code>br x9</code></h5><p>这条指令使得IDA不能F5得到跳转地址；</p><h5 id="2-经过分析"><a href="#2-经过分析" class="headerlink" title="2.  经过分析"></a>2.  经过分析</h5><p>x9存储的实际上是通过数组和加减法运算得到的地址：</p><h5 id="3-跳转原理："><a href="#3-跳转原理：" class="headerlink" title="3.  跳转原理："></a>3.  跳转原理：</h5><p>x24是一个数组（存储基地址）；x27是固定的offset</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1.比较w8和wX<br>2.如果w8&gt;wX，x9=x21，否则x9=x26<br>3.x9=[x24+x9]<br>4.x9=x9+x27<br>5.跳转到x9<br></code></pre></td></tr></table></figure><h5 id="4-去混淆思路："><a href="#4-去混淆思路：" class="headerlink" title="4.  去混淆思路："></a>4.  去混淆思路：</h5><p>提前计算好地址，使用 b 指令进行直接跳转</p><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimgimg-20241118014229.png" alt="截屏2024-11-18 01.42.29"></p><h5 id="5-去混淆效果："><a href="#5-去混淆效果：" class="headerlink" title="5.  去混淆效果："></a>5.  去混淆效果：</h5><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimage-20241119211854408.png" alt="image-20241119211854408"></p><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimage-20241119211609475.png" alt="image-20241119211609475"></p><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimgimage-20241119211354141.png" alt="image-20241119211354141"></p><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimgimage-20241122210717896.png" alt="image-20241122210717896"></p><h5 id="6-修改寄存器值，执行未经过的分支"><a href="#6-修改寄存器值，执行未经过的分支" class="headerlink" title="6.  修改寄存器值，执行未经过的分支"></a>6.  修改寄存器值，执行未经过的分支</h5><p>会发现unidbg只处理了走过的分支；而未走的分支依旧是<code>br x9</code>  ；写段特定的脚本进行处理看看效果</p><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimgimage-20241119233426703.png" alt="image-20241119233426703"></p><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimage-20241119233636794.png" alt="image-20241119233636794"></p><h5 id="7-处理分支的堆栈及代码"><a href="#7-处理分支的堆栈及代码" class="headerlink" title="7.  处理分支的堆栈及代码"></a>7.  处理分支的堆栈及代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// public void do_processBr()</span><br><br><span class="hljs-keyword">if</span>(instructions.peek().getAddr()- <span class="hljs-keyword">module</span>.base==<span class="hljs-number">0x6b904</span>)&#123;<br>            emulator.getBackend().reg_write(Arm64Const.UC_ARM64_REG_W8,<span class="hljs-number">1</span>);<br>            System.out.println(<span class="hljs-string">&quot;patch reg success&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 可能会报错，将vm.checkVersion注释就可以<br>//Exception in thread &quot;main&quot; java.lang.IllegalStateException: Illegal JNI version: 0xffffffff<br>//at com.github.unidbg.linux.android.dvm.BaseVM.checkVersion(BaseVM.java:228)<br>//at com.github.unidbg.linux.android.dvm.DalvikModule.callJNI_OnLoad(DalvikModule.java:39)<br>//at antiOllvm.callJNIOnload(antiOllvm.java:83)<br>//at antiOllvm.main(antiOllvm.java:497)<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimgimgimage-20241120182856534.png" alt="image-20241120182856534"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs assembly">// 相关堆栈调用<br><br>6b900:ldr w8, [sp, #0x24]<br>6b904:cmp w8, #0// 令w8&gt;0，看看效果<br>6b908:csel w8, w25, w23, eq<br>6b90c:b #0xfffffffffffffd84<br><br>6b690:cmp w8, w25<br>6b694:csel x9, x21, x26, lo<br>6b698:ldr x9, [x24, x9]<br>6b69c:add x9, x9, x27<br>6b6a0:br x9<br><br>6b754:cmp w8, w23// 在这一步让w8&gt;w23，产生进位标志<br>6b758:csel x9, x22, x19, lo<br>6b75c:ldr x9, [x24, x9]<br>6b760:add x9, x9, x27<br>6b764:br x9<br><br>patch后<br>(6B760:B.CC  loc_6B768<br> 6B764:B  loc_6B7EC)<br><br>6B7EC:CMP  W8, W10<br>6B7F0:CSEL  X9, X7, X6, CC<br>6B7F4:LDR  X9, [X24,X9]<br>6B7F8:ADD  X9, X9, X27<br>6B7FC:BR  X9<br></code></pre></td></tr></table></figure><h5 id="8-patch-效果"><a href="#8-patch-效果" class="headerlink" title="8.  patch 效果"></a>8.  patch 效果</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// public void patch()</span><br><span class="hljs-comment">// 继续查看堆栈进行patch（注意要把第一次patch完成的outFile文件作为第二次的inFile）</span><br>f=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(outName);<br><span class="hljs-comment">// 第二次patch的in文件应该是第一次的out文件</span><br><span class="hljs-type">byte</span>[] data=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[(<span class="hljs-type">int</span>)f.length()];<br>FileInputStream fis=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(f);<br>fis.read(data);<br>fis.close();<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimgimage-20241120192734462.png" alt="image-20241120192734462"></p><h5 id="9-接下来依旧是一样的patch。。。会发现有很多不会进入的分支。。慢慢patch"><a href="#9-接下来依旧是一样的patch。。。会发现有很多不会进入的分支。。慢慢patch" class="headerlink" title="9. 接下来依旧是一样的patch。。。会发现有很多不会进入的分支。。慢慢patch"></a>9. 接下来依旧是一样的patch。。。会发现有很多不会进入的分支。。慢慢patch</h5><h6 id="第一部份"><a href="#第一部份" class="headerlink" title="第一部份"></a>第一部份</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs assembly">// 目标调用链：6b910&lt;--6b7ec&lt;--6b754<br>// 当前调用链：6b800&lt;--6b7ec&lt;--6b754<br>attach<br>6b690  cmp  w8, w25<br>6b694  csel  x9, x21, x26, lo<br>6b698  ldr  x9, [x24, x9]<br>6b69c  add  x9, x9, x27<br>6b6a0  br  x9<br><br><br>6b6a4  cmp  w8, w28<br>6b6a8  csel  x9, x16, x15, lo<br>6b6ac  ldr  x9, [x24, x9]<br>6b6b0  add  x9, x9, x27<br>6b6b4  br  x9<br><br><br>6b7b8  cmp  w8, w13<br>6b7bc  csel  x9, x3, x2, lo<br>6b7c0  ldr  x9, [x24, x9]<br>6b7c4  add  x9, x9, x27<br>6b7c8  br  x9<br><br><br>6b8cc  cmp  w8, w12<br>6b8d0  movz  w9, #0xc8<br>6b8d4  csel  x9, x9, xzr, lo<br>6b8d8  ldr  x9, [x24, x9]<br>6b8dc  add  x9, x9, x27<br>6b8e0  br  x9<br><br><br>6b8e4  cmp  w8, w13<br>6b8e8  movz  w9, #0xe8<br>6b8ec  movz  w1, #0x18<br>6b8f0  csel  x9, x1, x9, eq<br>6b8f4  ldr  x9, [x24, x9]<br>6b8f8  add  x9, x9, x27<br>6b8fc  br  x9<br><br><br>6b900  ldr  w8, [sp, #0x24]<br>patch regW8 success<br>6b904  cmp  w8, #0<br>6b908  csel  w8, w25, w23, eq<br>6b90c  b  #0xfffffffffffffd84<br><br><br>6b690  cmp  w8, w25<br>6b694  csel  x9, x21, x26, lo<br>6b698  ldr  x9, [x24, x9]<br>6b69c  add  x9, x9, x27<br>6b6a0  br  x9<br><br>6b754  cmp  w8, w23<br>6b758  csel  x9, x22, x19, lo<br>6b75c  ldr  x9, [x24, x9]<br>6b760  add  x9, x9, x27<br>6b764  br  x9<br><br>6b7ec  cmp  w8, w10<br>6b7f0  csel  x9, x7, x6, lo<br>6b7f4  ldr  x9, [x24, x9]<br>6b7f8  add  x9, x9, x27<br>6b7fc  br  x9<br><br>// b.cc  6b800<br>// b  6b910<br><br>// 目标跳转：6b910<br>// 目前跳转：6b800<br><br>6b800  cmp  w8, w23<br>6b804  movz  w9, #0x100<br>6b808  movz  w1, #0xf0<br>6b80c  csel  x9, x1, x9, eq<br>6b810  ldr  x9, [x24, x9]<br>6b814  add  x9, x9, x27<br>6b818  br  x9<br><br>6b690  cmp  w8, w25<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs assembly">// patch寄存器之后确实跳转到6b910了，先把这部分patch了<br>6b910  movz  w9, #0xcf81<br>6b914  movk  w9, #0x7c26, lsl #16<br>6b918  cmp  w8, w9<br>6b91c  movz  w9, #0xb8<br>6b920  movz  w1, #0xa8<br>6b924  csel  x9, x1, x9, lo<br>6b928  ldr  x9, [x24, x9]<br>6b92c  add  x9, x9, x27<br>6b930  br  x9<br><br>6b934  cmp  w8, w10<br>6b938  movz  w9, #0x118<br>6b93c  movz  w1, #0x48<br>6b940  csel  x9, x1, x9, eq<br>6b944  ldr  x9, [x24, x9]<br>6b948  add  x9, x9, x27<br>6b94c  br  x9<br><br>6b690  cmp  w8, w25<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimg%E6%88%AA%E5%B1%8F2024-11-22%2018.45.01.png" alt="截屏2024-11-22 18.45.01"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs assembly">6B910  MOV  W9, #0x7C26CF81<br>6B918  CMP  W8, W9<br>6B91C  MOV  W9, #0xB8<br>6B920  MOV  W1, #0xA8<br>6B924  NOP<br>6B928  NOP<br>6B92C  B.CC  loc_6B934<br>6B930  B     loc_6B970<br>// 目标跳转：6b970<br>// 当前跳转：6b934<br></code></pre></td></tr></table></figure><h6 id="第二部份"><a href="#第二部份" class="headerlink" title="第二部份"></a>第二部份</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs assembly">// 目标调用链：6b7cc&lt;--6b7b8<br>// 目前调用链：6b8cc&lt;--6b7b8<br><br>attach<br>6b690  cmp  w8, w25<br>6b694  csel  x9, x21, x26, lo<br>6b698  ldr  x9, [x24, x9]<br>6b69c  add  x9, x9, x27<br>6b6a0  br  x9<br><br>6b6a4  cmp  w8, w28<br>6b6a8  csel  x9, x16, x15, lo<br>6b6ac  ldr  x9, [x24, x9]<br>6b6b0  add  x9, x9, x27<br>6b6b4  br  x9<br><br>patch regW8 success<br>6b7b8  cmp  w8, w13<br>6b7bc  csel  x9, x3, x2, lo<br>6b7c0  ldr  x9, [x24, x9]<br>6b7c4  add  x9, x9, x27<br>6b7c8  br  x9<br><br>// 0x6b7c4  B.CC  loc_6B7CC<br>// 0x6b7c8  B  loc_6B8CC<br><br>// patch之后确实跳转了<br>6b7cc  cmp  w8, w28<br>6b7d0  movz  w9, #0x70<br>6b7d4  movz  w1, #0x30<br>6b7d8  csel  x9, x1, x9, eq<br>6b7dc  ldr  x9, [x24, x9]<br>6b7e0  add  x9, x9, x27<br>6b7e4  br  x9<br><br>// 又回到了0x6b690<br>6b690  cmp  w8, w25<br>6b694  csel  x9, x21, x26, lo<br>6b698  ldr  x9, [x24, x9]<br>6b69c  add  x9, x9, x27<br>6b6a0  br  x9<br><br>6b6a4  cmp  w8, w28<br>6b6a8  csel  x9, x16, x15, lo<br>6b6ac  ldr  x9, [x24, x9]<br>6b6b0  add  x9, x9, x27<br>6b6b4  br  x9<br><br>6b6b8  cmp  w8, w14<br>6b6bc  csel  x9, x0, x17, lo<br>6b6c0  ldr  x9, [x24, x9]<br>6b6c4  add  x9, x9, x27<br>6b6c8  br  x9<br><br>6b6cc  movz  w9, #0xa634<br>6b6d0  movk  w9, #0x59a, lsl #16<br>6b6d4  cmp  w8, w9<br>6b6d8  movz  w9, #0x60<br>6b6dc  movz  w1, #0x50<br>6b6e0  csel  x9, x1, x9, eq<br>6b6e4  ldr  x9, [x24, x9]<br>6b6e8  add  x9, x9, x27<br>6b6ec  br  x9<br><br>// 0x6b6ec是跳转回0x6b690的，所以写条件判断，如果遇到0x6b6ec直接退出就好<br>// 0x6b6ec  B  loc_6B690<br><br>6b690  cmp  w8, w25<br>6b694  csel  x9, x21, x26, lo<br>6b698  ldr  x9, [x24, x9]<br>6b69c  add  x9, x9, x27<br>6b6a0  br  x9<br><br>6b6a4  cmp  w8, w28<br>6b6a8  csel  x9, x16, x15, lo<br>6b6ac  ldr  x9, [x24, x9]<br>6b6b0  add  x9, x9, x27<br>6b6b4  br  x9<br><br>6b6b8  cmp  w8, w14<br>6b6bc  csel  x9, x0, x17, lo<br>6b6c0  ldr  x9, [x24, x9]<br>6b6c4  add  x9, x9, x27<br>6b6c8  br  x9<br><br>6b6cc  movz  w9, #0xa634<br>6b6d0  movk  w9, #0x59a, lsl #16<br>6b6d4  cmp  w8, w9<br>6b6d8  movz  w9, #0x60<br>6b6dc  movz  w1, #0x50<br><br></code></pre></td></tr></table></figure><h5 id="10-最终去间接跳转混淆效果"><a href="#10-最终去间接跳转混淆效果" class="headerlink" title="10. 最终去间接跳转混淆效果"></a>10. 最终去间接跳转混淆效果</h5><p>看得出来是一个控制流平坦化</p><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimgimg-20241122205940.png" alt="截屏2024-11-22 20.59.40"></p><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimgimg-20241122210010.png" alt="截屏2024-11-22 21.00.10"></p><h3 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h3><p><a href="https://bbs.kanxue.com/thread-277086-1.htm">https://bbs.kanxue.com/thread-277086-1.htm</a></p><p><a href="https://github.com/zhkl0228/unidbg/issues/585">https://github.com/zhkl0228/unidbg/issues/585</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Android逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>区块链-挖矿</title>
    <link href="/2024/10/29/%E5%8C%BA%E5%9D%97%E9%93%BE-%E6%8C%96%E7%9F%BF/"/>
    <url>/2024/10/29/%E5%8C%BA%E5%9D%97%E9%93%BE-%E6%8C%96%E7%9F%BF/</url>
    
    <content type="html"><![CDATA[<h2 id="区块链-挖矿"><a href="#区块链-挖矿" class="headerlink" title="区块链-挖矿"></a>区块链-挖矿</h2><p>本质就是为了寻找经过hash加密后，以很多位0开头的字符串</p><p>但是这与2的n次方有关；随着0位数的增多，需要的n值也越大（即计算次数按照指数增长</p><p>一个简单的demo</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># generate.py:生成初始文本</span><br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;qukuailian.txt&quot;</span>, <span class="hljs-string">&#x27;a&#x27;</span>)<br>hello_str = <span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">65536</span>):<br>    tmp = hello_str+<span class="hljs-built_in">str</span>(i)<br>    f.write(tmp)<br>    f.write(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>f.close<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;success&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># sha256.py:计算哈希值</span><br><br><span class="hljs-keyword">import</span> hashlib<br><br>fwrite = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;sha256_result.txt&quot;</span>, <span class="hljs-string">&#x27;a&#x27;</span>)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;qukuailian.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:<br>        sha256_str = hashlib.sha256(line.encode()).hexdigest()<br>        fwrite.write(sha256_str)<br>        fwrite.write(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;success&quot;</span>)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># findzero.py:计算0出现的次数并统计</span><br><br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> takewhile<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">count_zero</span>(<span class="hljs-params">line</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> takewhile(<span class="hljs-keyword">lambda</span> x: x == <span class="hljs-string">&#x27;0&#x27;</span>, line))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;sha256_result.txt&quot;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br>    i = <span class="hljs-number">1</span><br>    <span class="hljs-built_in">dict</span> = &#123;&#125;<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:<br>        zero_sum = count_zero(line)<br>        <span class="hljs-keyword">if</span> zero_sum != <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">dict</span>[i] = zero_sum<br>        i += <span class="hljs-number">1</span><br>    f.close()<br>    <span class="hljs-comment"># print(dict)</span><br>    <span class="hljs-comment"># for key,value in enumerate(dict)</span><br>    <span class="hljs-keyword">for</span> index, (key, value) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(<span class="hljs-built_in">dict</span>.items()):<br>        <span class="hljs-keyword">if</span> value == <span class="hljs-number">2</span>:<br>            <span class="hljs-built_in">print</span>(key, value)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>密码学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac使用ubuntu-docker交叉编译Linux内核</title>
    <link href="/2024/10/23/Mac%E4%BD%BF%E7%94%A8ubuntu-docker%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91Linux%E5%86%85%E6%A0%B8/"/>
    <url>/2024/10/23/Mac%E4%BD%BF%E7%94%A8ubuntu-docker%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91Linux%E5%86%85%E6%A0%B8/</url>
    
    <content type="html"><![CDATA[<h2 id="Mac使用ubuntu-docker交叉编译Linux内核"><a href="#Mac使用ubuntu-docker交叉编译Linux内核" class="headerlink" title="Mac使用ubuntu-docker交叉编译Linux内核"></a>Mac使用ubuntu-docker交叉编译Linux内核</h2><p>在使用Linux时发现缺少了binder内核，而且没有扩展binder内核的操作。。只能尝试自己编译一个</p><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">docker安装过程不详细介绍。。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将主机的文件复制到容器里</span><br>docker cp  &lt;path_to_file&gt;  docker_id:&lt;file_store_path&gt;<br></code></pre></td></tr></table></figure><h4 id="安装合适的gcc版本"><a href="#安装合适的gcc版本" class="headerlink" title="安装合适的gcc版本"></a>安装合适的gcc版本</h4><ol><li><p>手动安装</p><p>选择一个合适的gcc版本 （架构&lt;arm&#x2F;x86&gt; - 版本 &lt;elf-none&#x2F;Linux&gt;）</p></li></ol><p>​gcc版本解释：<a href="https://blog.csdn.net/zhang421412170/article/details/110952705">https://blog.csdn.net/zhang421412170/article/details/110952705</a></p><p>​gnu官网下载：<a href="https://developer.arm.com/downloads/-/arm-gnu-toolchain-downloads">https://developer.arm.com/downloads/-/arm-gnu-toolchain-downloads</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">主机下载好gnu后 copy到容器里</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker <span class="hljs-built_in">cp</span>  &lt;path_to_gcc-name&gt;  docker_id:&lt;file_store_path&gt;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加环境变量</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;/path/aarch64-none-elf/bin:<span class="hljs-variable">$PATH</span>&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看安装效果</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">aarch64-none-elf-gcc --version</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">gcc</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">bash: gcc: <span class="hljs-built_in">command</span> not found</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">建立软链接</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">ln</span> -s $(<span class="hljs-built_in">which</span> aarch64-none-elf-gcc) /usr/local/bin/gcc</span><br></code></pre></td></tr></table></figure><ol start="2"><li>apt安装（直接安装aarch64-linux-gcc也可以用</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">apt <span class="hljs-keyword">install</span> gcc<br></code></pre></td></tr></table></figure><h4 id="Linux内核编译"><a href="#Linux内核编译" class="headerlink" title="Linux内核编译"></a>Linux内核编译</h4>]]></content>
    
    
    
    <tags>
      
      <tag>内核</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux内核学习</title>
    <link href="/2024/10/23/Linux%E5%86%85%E6%A0%B8%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/10/23/Linux%E5%86%85%E6%A0%B8%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="Linux内核学习"><a href="#Linux内核学习" class="headerlink" title="Linux内核学习"></a>Linux内核学习</h2><p>在Linux上使用安卓模拟器时遇到了一些与内核相关的问题…</p><h4 id="Binder-and-Binderf"><a href="#Binder-and-Binderf" class="headerlink" title="Binder and Binderf"></a>Binder and Binderf</h4><h4 id="DKMS"><a href="#DKMS" class="headerlink" title="DKMS"></a>DKMS</h4><p>DKMS用于在Linux操作系统中构建和维护内核模块。DKMS将每个内核模块视作源代码，通过DKMS可以很方便地实现编译内核以及实现内核功能的扩展（但可能会与现有的内核模块起冲突）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">DKMS工作需要有与内核版本匹配的内核头文件</span><br>sudo apt-get install linux-headers-$(uname -r)<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install dkms<br>sudo dkms add -m &lt;module_name&gt; -v &lt;module_version&gt;<br>sudo dkms build -m &lt;module_name&gt; -v &lt;module_version&gt; -k &lt;kernel_version&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">https://blog.csdn.net/ldswfun/article/details/131554905</span><br></code></pre></td></tr></table></figure><h5 id="举个栗子：在Linux上编译binder-和-ashmem"><a href="#举个栗子：在Linux上编译binder-和-ashmem" class="headerlink" title="举个栗子：在Linux上编译binder 和 ashmem"></a>举个栗子：在Linux上编译binder 和 ashmem</h5><p><a href="https://blog.tama.guru/record/redroit.html">https://blog.tama.guru/record/redroit.html</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装当前内核的源码</span><br>apt install linux-source-$(uname-r)<br><br>make menuconfig<br><span class="hljs-meta prompt_"># </span><span class="language-bash">会弹出一个界面，可以勾选要编译的内核</span><br></code></pre></td></tr></table></figure><h4 id="Linux-zen"><a href="#Linux-zen" class="headerlink" title="Linux-zen"></a>Linux-zen</h4><p>牺牲吞吐量提高性能的内核版本</p><h4 id="Linux-modules-extra"><a href="#Linux-modules-extra" class="headerlink" title="Linux- modules- extra"></a>Linux- modules- extra</h4><h4 id="how-linux-setup-gui-gui开发"><a href="#how-linux-setup-gui-gui开发" class="headerlink" title="how linux setup gui?(gui开发)"></a>how linux setup gui?(gui开发)</h4>]]></content>
    
    
    
    <tags>
      
      <tag>内核</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows-wsl2安装ubuntu及docker指南</title>
    <link href="/2024/10/08/windows-wsl2%E5%AE%89%E8%A3%85ubuntu%E5%8F%8Adocker%E6%8C%87%E5%8D%97/"/>
    <url>/2024/10/08/windows-wsl2%E5%AE%89%E8%A3%85ubuntu%E5%8F%8Adocker%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h2 id="windows-wsl2安装ubuntu和docker指南"><a href="#windows-wsl2安装ubuntu和docker指南" class="headerlink" title="windows-wsl2安装ubuntu和docker指南"></a>windows-wsl2安装ubuntu和docker指南</h2><h4 id="wsl2安装"><a href="#wsl2安装" class="headerlink" title="wsl2安装"></a>wsl2安装</h4><ol><li><p>安装前置：windows 11；</p><p>搜索windows功能，打开hyber-V，使用于Linux的windows子系统，虚拟机平台三个功能；</p><p>cpu开启虚拟化</p></li><li><p>安装wsl2：<a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi</a></p></li><li><p>切换到wsl2版本，在power shell输入<code>wsl --set-version 2</code>；（注：wsl2才有systemctl，而wsl1是没有的</p></li></ol><h4 id="安装ubuntu（自定义发行版本）"><a href="#安装ubuntu（自定义发行版本）" class="headerlink" title="安装ubuntu（自定义发行版本）"></a>安装ubuntu（自定义发行版本）</h4><ol><li><p>查看所有Linux发行版本<code>wsl -l -o</code></p></li><li><p>安装Linux<code>wsl -install -d &lt;版本名字&gt;</code></p></li><li><p>在powershell执行 <code>wsl</code>，就可以执行下载好的Linux版本了</p></li><li><p>在ubuntu中查看wsl.conf文件<code>cat /etc/wsl.conf</code>，会看到</p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimage-20240927152622051.png" alt="image-20240927152622051" style="zoom:67%;" /><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[boot]<br>systemd=true<br></code></pre></td></tr></table></figure><p>没有的话需要自己配置一下</p></li><li><p>重启电脑后 <code>systemctl</code> 才能成功（踩坑了</p></li></ol><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimage-20240927154630923.png" alt="image-20240927154630923"></p><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt update<br>sudo apt install apt-transport-https ca-certificates curl software-properties-common<br>sudo -i curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/trusted.gpg.d/docker-ce.gpg<br>sudo apt-key fingerprint 0EBFCD88<br>sudo add-apt-repository &quot;deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;<br>sudo apt update<br>sudo apt install docker-ce docker-ce-cli containerd.io<br>sudo docker run hello-world<br></code></pre></td></tr></table></figure><h4 id="配置docker-android"><a href="#配置docker-android" class="headerlink" title="配置docker- android"></a>配置docker- android</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">拉取镜像</span><br>sudo docker pull budtmo/docker-android:emulator_9.0<br><span class="hljs-meta prompt_"># </span><span class="language-bash">运行镜像，通过打开端口5554和5555 使其能够配合adb使用</span><br>docker run -d -p 6080:6080 -p 5554:5554 -p 5555:5555 -e EMULATOR_DEVICE=&quot;Samsung Galaxy S10&quot; -e EMULATOR_MEMORY=6144m -e WEB_VNC=true --device /dev/kvm --name android-container budtmo/docker-android:emulator_9.0<br><span class="hljs-meta prompt_"># </span><span class="language-bash">在网页访问模拟器 http://localhost:6080</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">adb connect localhost:5554</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">adb devices</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu扩展逻辑卷</title>
    <link href="/2024/10/08/ubuntu%E6%89%A9%E5%B1%95%E9%80%BB%E8%BE%91%E5%8D%B7/"/>
    <url>/2024/10/08/ubuntu%E6%89%A9%E5%B1%95%E9%80%BB%E8%BE%91%E5%8D%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="ubuntu扩展逻辑卷"><a href="#ubuntu扩展逻辑卷" class="headerlink" title="ubuntu扩展逻辑卷"></a>ubuntu扩展逻辑卷</h2><h6 id="ubuntu在创建逻辑卷组时，只有部分的物理卷空间被用于逻辑卷，剩下的未进行分配；通过以下操作进行扩展"><a href="#ubuntu在创建逻辑卷组时，只有部分的物理卷空间被用于逻辑卷，剩下的未进行分配；通过以下操作进行扩展" class="headerlink" title="ubuntu在创建逻辑卷组时，只有部分的物理卷空间被用于逻辑卷，剩下的未进行分配；通过以下操作进行扩展"></a>ubuntu在创建逻辑卷组时，只有部分的物理卷空间被用于逻辑卷，剩下的未进行分配；通过以下操作进行扩展</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看卷组</span><br><span class="hljs-built_in">sudo</span> vgdisplay<br><br><span class="hljs-comment">## VG Size                &lt; 17.32GB</span><br><span class="hljs-comment">## Alloc PE /Size         2560 / 10.00GB</span><br><span class="hljs-comment">## Free PE/Size           1873 / &lt;7.32GB</span><br><span class="hljs-comment">## VGSize是可用物理空间，Alloc是已分配的空间，Free是未分配的</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h<br><span class="hljs-comment">## 找到要扩展的逻辑卷路径</span><br><span class="hljs-comment">## /dev/mapper/ubuntu--vg-ubuntu--lv</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> lvextend -l +100%FREE  /dev/mapper/ubuntu--vg-ubuntu--lv<br><span class="hljs-built_in">sudo</span> resize2fs /dev/mapper/ubuntu--vg-ubuntu--lv<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h<br><span class="hljs-comment">## 再次查看就会发现分配好了</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小记-常用的cmd</title>
    <link href="/2024/09/29/%E5%B0%8F%E8%AE%B0-%E5%B8%B8%E7%94%A8%E7%9A%84cmd/"/>
    <url>/2024/09/29/%E5%B0%8F%E8%AE%B0-%E5%B8%B8%E7%94%A8%E7%9A%84cmd/</url>
    
    <content type="html"><![CDATA[<h2 id="小记-常用的cmd"><a href="#小记-常用的cmd" class="headerlink" title="小记-常用的cmd"></a>小记-常用的cmd</h2><h6 id="（记不住git-ubuntu-frida···各种常用工具的命令，故写一个md记录一下"><a href="#（记不住git-ubuntu-frida···各种常用工具的命令，故写一个md记录一下" class="headerlink" title="（记不住git&#x2F;ubuntu&#x2F;frida···各种常用工具的命令，故写一个md记录一下"></a>（记不住git&#x2F;ubuntu&#x2F;frida···各种常用工具的命令，故写一个md记录一下</h6><h6 id="（这是一篇会陆续更新的blog"><a href="#（这是一篇会陆续更新的blog" class="headerlink" title="（这是一篇会陆续更新的blog"></a>（这是一篇会陆续更新的blog</h6><h4 id="git"><a href="#git" class="headerlink" title="git"></a>git</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 一些常用指令</span><br>git config -l <br>git init <br>git add .<br>git commit -m <span class="hljs-string">&quot;&quot;</span><br>git push -u origin main<br>git pull origin main<br><br><span class="hljs-comment"># git指定分支拉取</span><br>git <span class="hljs-built_in">clone</span> --branch &lt;branc_name&gt; &lt;url&gt;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># pull 报错，主要是上一次的分支没有合并</span><br>git pull origin main<br><br>From https://github.com/Cel1n14/code<br> * branch            main       -&gt; FETCH_HEAD<br>fatal: refusing to merge unrelated histories<br><br><span class="hljs-comment"># 合并 未合并的分支</span><br>git pull origin main --allow-unrelated-histories<br><br>From https://github.com/Cel1n14/code<br> * branch            main       -&gt; FETCH_HEAD<br>hint: Waiting <span class="hljs-keyword">for</span> your editor to close the file... <br>[9]  + 96525 suspended  git pull origin main --allow-unrelated-histories<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># pull 报错，主要是存在冲突文件，？是冲突文件夹没有被 git add </span><br>git pull origin main                              <br><br>error: You have not concluded your merge (MERGE_HEAD exists).<br>hint: Please, commit your changes before merging.<br>fatal: Exiting because of unfinished merge.<br><br><span class="hljs-comment"># 查看冲突文件</span><br>git status<br><br>On branch main<br>All conflicts fixed but you are still merging.<br> (use <span class="hljs-string">&quot;git commit&quot;</span> to conclude merge)<br><br>Changes to be committed:<br>new file:   README.md<br><br>Untracked files:<br>  (use <span class="hljs-string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="hljs-keyword">in</span> what will be committed)<br>crypto/<br><br><span class="hljs-comment"># 添加文件夹并上传</span><br>git add crypto<br>git commit -m <span class="hljs-string">&#x27;crypto&#x27;</span><br><br>git pull origin main  <br>git push -u origin main<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除主目录下的系统文件并提交</span><br>git <span class="hljs-built_in">rm</span> --cached .DS_Store<br>git commit -m <span class="hljs-string">&quot;remove .DS_Store&quot;</span><br>git push origin main<br><br><span class="hljs-comment"># 删除子目录下的系统文件并提交</span><br>git <span class="hljs-built_in">rm</span> --cached ./crypto/.DS_Store<br>git commit -m <span class="hljs-string">&quot;remove /crypto/.DS_Store&quot;</span><br>git push origin main                    <br></code></pre></td></tr></table></figure><h4 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装docker</span><br>curl -fsSL https://test.docker.com -o test-docker.sh<br><span class="hljs-built_in">sudo</span> sh test-docker.sh<br><br><span class="hljs-comment"># 拉取某个镜像</span><br>docker pull url-to-docker<br><br><span class="hljs-comment"># 运行某个容器</span><br><span class="hljs-comment"># -d :返回容器ID</span><br><span class="hljs-comment"># -p :端口映射 host_port:container_port</span><br><span class="hljs-comment"># --name :容器名称</span><br><span class="hljs-comment"># docker run -d -p 8080:80 -v /host/data:/data --name webserver nginx</span><br>docker run -d -p :8080:80 --name my-docker docker<br><br><span class="hljs-comment"># 删除某个容器</span><br>docker <span class="hljs-built_in">rm</span> docker-name<br><br><span class="hljs-comment"># 查看正在运行的容器</span><br>docker ps<br><br>systemctl start docker<br><br><span class="hljs-comment"># 查看网络信息</span><br>docker network <span class="hljs-built_in">ls</span><br>docker network inspect &lt;network_name&gt;<br>docker inspect -f <span class="hljs-string">&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> &lt;container_id&gt;<br><br><span class="hljs-comment"># 卸载docker</span><br><span class="hljs-built_in">sudo</span> apt-get purge docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf /var/lib/docker<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf /var/lib/containerd<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> /etc/apt/sources.list.d/docker.list<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> /etc/apt/keyrings/docker.asc<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf /run/docker<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf /run/docker.sock<br></code></pre></td></tr></table></figure><h4 id="Linux-Ubuntu-Debian"><a href="#Linux-Ubuntu-Debian" class="headerlink" title="Linux(Ubuntu&#x2F;Debian)"></a>Linux(Ubuntu&#x2F;Debian)</h4><p>阿里源镜像：<a href="https://developer.aliyun.com/packageSearch">https://developer.aliyun.com/packageSearch</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看内核信息</span><br><span class="hljs-built_in">uname</span> -m<br><br><span class="hljs-comment"># 查看网络信息</span><br>nmcli<br><br><span class="hljs-comment"># 查看进程</span><br>ps -aux |grep <br><br><span class="hljs-comment"># 清空trash</span><br><span class="hljs-built_in">rm</span> -rf ~/.local/share/Trash/&#123;files,info&#125;/*<br><br><span class="hljs-comment"># 查看磁盘占用</span><br><span class="hljs-built_in">df</span> -h<br><br><span class="hljs-comment"># 在根目录查找某文件目录</span><br>find / -name <span class="hljs-string">&quot;*example*&quot;</span><br>find . -name <span class="hljs-string">&quot;*example*&quot;</span><br><br><span class="hljs-comment"># 返回当前所在路径</span><br><span class="hljs-built_in">pwd</span><br><br><span class="hljs-comment"># 查看某个文件内容</span><br><span class="hljs-built_in">cat</span> file-name<br><br><span class="hljs-comment"># vim指令</span><br>vim ./bashrc<br><span class="hljs-comment"># insert</span><br>按 i<br><span class="hljs-comment"># 退出编辑</span><br>按 ESC<br><span class="hljs-comment"># 不保存退出</span><br>:q!<br><span class="hljs-comment"># 保存并退出</span><br>:wq!<br><br><span class="hljs-comment"># fdisk 磁盘分区</span><br><span class="hljs-built_in">sudo</span> fdisk /dev/&lt;disk-name&gt;<br><span class="hljs-comment"># 查看所有命令</span><br>m<br><span class="hljs-comment"># 扩展磁盘分区</span><br>n<br>e<br><span class="hljs-comment"># 删除磁盘分区</span><br>d<br><br><span class="hljs-comment"># 安装.deb</span><br>dpkg --install &lt;file-name&gt;.deb<br><br><span class="hljs-comment"># 查看下载信息</span><br>dpkg --query -L &lt;file-name&gt;<br>apt search &lt;file-name&gt;<br><br><span class="hljs-comment"># 查看包所有文件及安装目录</span><br>dpkg -L &lt;packetdge name&gt; <br><br><span class="hljs-comment"># 列出所有可下载版本</span><br>apt-cache madison &lt;file-name&gt;<br>snap info &lt;file-name&gt;<br><br><span class="hljs-comment"># 查看package的源</span><br>apt-cache policy package_name<br><br><span class="hljs-comment"># 安装其他版本的packetage</span><br>apt install pack=&lt;version&gt;<br>snap refresh --channel==&lt;version&gt; &lt;file-name&gt;<br><br><span class="hljs-comment"># 查看文件权限</span><br><span class="hljs-built_in">ls</span> -l &lt;path-to-file&gt;<br><br><span class="hljs-comment"># 查看系统日志(以docker.socket)</span><br>journalctl -xeu /var/run/docker.socket<br><br><span class="hljs-comment"># 切换防火墙 </span><br><span class="hljs-built_in">sudo</span> update-alternatives --<span class="hljs-built_in">set</span> iptables /usr/sbin/iptables-legacy<br><span class="hljs-built_in">sudo</span> update-alternatives --<span class="hljs-built_in">set</span> ip6tables /usr/sbin/ip6tables-legacy<br>update-alternatives --display iptables<br>lsmod | grep nft<br><br><span class="hljs-comment"># https://lixiangyun.gitbook.io/iptables_doc_zh_cn</span><br><br><span class="hljs-comment"># 查看防火墙状态</span><br><span class="hljs-built_in">sudo</span> iptables -L<br><span class="hljs-built_in">sudo</span> nft list ruleset<br><br><span class="hljs-comment"># 用户组</span><br><span class="hljs-built_in">sudo</span> usermod -aG docker $(<span class="hljs-built_in">whoami</span>)<br><br><span class="hljs-comment"># 安装adb</span><br><span class="hljs-built_in">sudo</span> apt-get install android-tools-adb<br><br><span class="hljs-comment"># 清空文件内容</span><br>&gt; &lt;filename&gt;<br><br><span class="hljs-comment"># 查看端口详情</span><br>netstat -ano |grep 5555<br>lsof -i:prot<br>ps aux |grep socat<br><br><span class="hljs-comment"># 查看内核配置</span><br>zcat /proc/config.gz<br><span class="hljs-built_in">cat</span> /boot/config-*<br><br><span class="hljs-comment"># 查看文件系统</span><br><span class="hljs-built_in">cat</span> /proc/filesystems<br><br><span class="hljs-comment"># 卸载冲突包</span><br>dkms status<br>dkms remove --alls<br><br><span class="hljs-comment"># 查看是否支持x11协议</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$XDG_SESSION_TYPE</span><br><br><span class="hljs-comment"># 彻底删除某个group（以cvd network为例</span><br><br><span class="hljs-comment">## 查看所有cuttlefish相关用户</span><br><span class="hljs-built_in">cat</span> /etc/passwd |grep cutf<br><span class="hljs-comment">### _cutf-operator:x:&lt;&gt;:&lt;&gt;::/var/empty:/usr/sbin/&lt;&gt;</span><br><br><span class="hljs-comment">## 删除相关用户</span><br><span class="hljs-built_in">sudo</span> userdel -r _cutf-operator<br><span class="hljs-comment">### userdel: user _cutf-operator is currently used by process 1763</span><br><span class="hljs-comment">### 直接kill -9 1763</span><br><br><span class="hljs-comment">## 查看组信息</span><br>getent group cvdnetwork<br><br><span class="hljs-comment">## 移除用户组cvdnetwork的某个用户</span><br>gpasswd -d &lt;usrname&gt; cvdnetwork<br><br><span class="hljs-comment">## 删除组</span><br>groupdel cvdnetwork<br><br><span class="hljs-comment">## 查看用户组有关的init脚本</span><br>grep -R <span class="hljs-string">&quot;cvdnetwork&quot;</span> /etc/<br><span class="hljs-built_in">rm</span> -rf &lt;path_to_init_script&gt;<br><br></code></pre></td></tr></table></figure><h4 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h4><p>和Linux差不多</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看内网IP</span><br>ifconfig<br><br><span class="hljs-comment"># 查看网关</span><br>netstat -rn<br><br><span class="hljs-comment"># 列出硬件端口</span><br>networksetup -listallhardwareports<br><br><span class="hljs-comment"># 将 连接到 localhost:6666 的数据 转发到 localhost:23456</span><br><span class="hljs-built_in">sudo</span> socat TCP4-LISTEN:6666,fork TCP4:localhost:23456<br><br><span class="hljs-comment"># 查看端口占用</span><br>lsof -i:5555<br><span class="hljs-comment"># kill某个进程</span><br><span class="hljs-built_in">kill</span> -9 pid、<br><br><span class="hljs-comment"># ssh远程连接设备</span><br>iproxy 2222 22<br>ssh root@ip<br><br></code></pre></td></tr></table></figure><h4 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 连接设备与断开设备</span><br>adb connect ip:port<br>adb disconnect ip:port <br><br>adb devices<br>adb shell<br><br><span class="hljs-comment"># 查看某个app进程</span><br>ps | grep com.test.app<br><br><span class="hljs-comment"># 查看网关</span><br>ip route show<br><br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> &lt;net&gt; down<br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> &lt;net_name&gt; name &lt;net_newname&gt;<br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> &lt;net&gt; up<br><br><span class="hljs-comment"># 查看日志</span><br>logcat |grep <br><br><span class="hljs-comment"># kill某个进程</span><br><span class="hljs-built_in">kill</span> -9 pid<br><br><span class="hljs-comment"># 列出某个文件夹下的所有文件</span><br><span class="hljs-built_in">ls</span> <br><br><span class="hljs-comment"># 查看某个文件内容</span><br><span class="hljs-built_in">cat</span> file-name<br><br><span class="hljs-comment"># 查看应用详情</span><br>ps -ef |grep<br><br><span class="hljs-comment"># 查看CPU占用</span><br>top<br></code></pre></td></tr></table></figure><h4 id="frida"><a href="#frida" class="headerlink" title="frida"></a>frida</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># kill上一个Frida进程</span><br>ps | grep frida<br><span class="hljs-built_in">kill</span> -9 pid<br><br><span class="hljs-comment"># 查询正在运行的app</span><br>frida-ps -Ua<br><br><span class="hljs-comment"># 端口转发</span><br>adb forward tcp:27042 tcp:27042<br><br><span class="hljs-comment"># 有时候会对27042端口进行检测，自定义端口运行</span><br>./fs1522 -l 0.0.0.0:1234<br>adb forward tcp:1234 tcp:1234<br><br><span class="hljs-comment"># PC端 冷启动</span><br>frida -H 127.0.0.1:1234 -f com.test.app -l hook.js --no-pause<br><span class="hljs-comment"># 热启动</span><br>frida -H 127.0.0.1:1234 -UF com.test.app -l hook.js --no-pause<br></code></pre></td></tr></table></figure><h4 id="Checkra1n-bagbak-otool-classdump"><a href="#Checkra1n-bagbak-otool-classdump" class="headerlink" title="Checkra1n-bagbak-otool-classdump"></a>Checkra1n-bagbak-otool-classdump</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># checkra1n查看越狱日志</span><br>/Applications/checkra1n.app/Contents/MacOS/checkra1n -cv<br><br><span class="hljs-comment"># bagbak 砸壳</span><br>bagbak -l<br>bagbak &lt;bundle&gt;<br><br><span class="hljs-comment"># frida-ios-dump砸壳，需要先ssh连接上手机</span><br><span class="hljs-comment"># -u :usr名字</span><br>  <span class="hljs-comment"># -P :password ，这里用的是默认密码</span><br>  <span class="hljs-comment"># 踩坑日记：要触发app才能进行dump</span><br>python dump.py -H 127.0.0.1 -p 2222 -u root -P alpine com.test.app<br><br><span class="hljs-comment"># otool查看是否砸壳成功</span><br><span class="hljs-comment"># 只要cryptid为0就行</span><br>otool -l APPname | grep crypt<br><br><span class="hljs-comment"># class-dump提取头文件</span><br>class-dump -H APPname -o &lt;path-restore-.h&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>理解Mac的虚拟化</title>
    <link href="/2024/09/24/%E7%90%86%E8%A7%A3Mac%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    <url>/2024/09/24/%E7%90%86%E8%A7%A3Mac%E8%99%9A%E6%8B%9F%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="理解Mac的虚拟化"><a href="#理解Mac的虚拟化" class="headerlink" title="理解Mac的虚拟化"></a>理解Mac的虚拟化</h2><h5 id="接着有一个问题就是，虚拟和模拟"><a href="#接着有一个问题就是，虚拟和模拟" class="headerlink" title="接着有一个问题就是，虚拟和模拟"></a>接着有一个问题就是，虚拟和模拟</h5><p>虚拟用的镜像文件同样是arm64架构的，这只是虚拟一个Linux平台；</p><p>而模拟用的镜像文件是amd64的，这里在Mac上模拟了一个x86-64架构的Linux平台</p><h5 id="忽然意识到kvm其实和虚拟机是虚拟的还是模拟的并没有关系"><a href="#忽然意识到kvm其实和虚拟机是虚拟的还是模拟的并没有关系" class="headerlink" title="忽然意识到kvm其实和虚拟机是虚拟的还是模拟的并没有关系"></a>忽然意识到kvm其实和虚拟机是虚拟的还是模拟的并没有关系</h5><p>kvm只需要内核支持kvm即可</p><p>查看Mac是否支持虚拟化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sysctl -a | grep machdep.cpu.features<br>sysctl kern.hv_support<br></code></pre></td></tr></table></figure><h5 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h5><p><a href="https://blog.csdn.net/Nbin_Newby/article/details/120307866">https://blog.csdn.net/Nbin_Newby/article/details/120307866</a></p><h3 id="241010再编"><a href="#241010再编" class="headerlink" title="241010再编"></a>241010再编</h3><h5 id="Qemu（二进制指令翻译技术）与KVM"><a href="#Qemu（二进制指令翻译技术）与KVM" class="headerlink" title="Qemu（二进制指令翻译技术）与KVM"></a>Qemu（二进制指令翻译技术）与KVM</h5><ol><li><p>Qemu是纯软件实现虚拟化模拟器（即虚拟机：包括ubuntu&#x2F;Debian&#x2F;android- emulator等等）；所谓虚拟化，就是对一些指令进行处理再传递给硬件（虽然都是arm64指令集，但文件格式&#x2F;调用接口不一样）</p></li><li><p>而KVM是硬件辅助虚拟化的技术，纯软件进行虚拟化的效率很低，KVM可以将Linux内核转化为一个虚拟化管理程序（Hypervisor）；这种技术需要VT-x&#x2F;VMx等硬件技术的支持</p></li></ol><p>参考博客：<a href="https://cloud.tencent.com/developer/article/147103">https://cloud.tencent.com/developer/article/147103</a></p><ol start="3"><li>Hypervisor：抽象的软件层，在CPU&#x2F;ram&#x2F;network之上；当运行一个虚拟机时，将CPU划分成若干部分（好使得每一台虚拟机都能够分配到CPU），同时hypervisor还将每台虚拟机独立出来，防止因为一台机器崩溃引起其它机器崩溃</li><li>macOS 使用 Hypervisor Framework 来处理虚拟化任务</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">sysctl -a | grep machdep.cpu.features<br><span class="hljs-meta prompt_"># </span><span class="language-bash">无任何返回，没有出现VMX</span><br><br>sysctl kern.hv_support<br><span class="hljs-meta prompt_"># </span><span class="language-bash">kern.hv_support: 1</span><br><br>egrep -c &#x27;(vmx|svm)&#x27; /proc/cpuinfo<br>0<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 当 &gt;=0 时，表示CPU支持硬件虚拟化</span></span><br></code></pre></td></tr></table></figure><h5 id="google-avd"><a href="#google-avd" class="headerlink" title="google-avd"></a>google-avd</h5><p>AVD(Android Vitrual Deivce)：AVD manager创建一个模拟器后，会在～&#x2F;.android&#x2F;avd目录下存在xxx.ini和xxx.avd；可以编译好所需内核后，启动创建的模拟器xxx</p><p>参考博客：</p><p><a href="https://blingblingxuanxuan.github.io/2020/06/30/goldfish/">https://blingblingxuanxuan.github.io/2020/06/30/goldfish/</a></p><p><a href="https://blog.csdn.net/leopard21/article/details/21715905">https://blog.csdn.net/leopard21/article/details/21715905</a></p><p><a href="https://blog.csdn.net/silently_frog/article/details/124063445">https://blog.csdn.net/silently_frog/article/details/124063445</a></p><p><a href="https://developer.aliyun.com/article/98595">https://developer.aliyun.com/article/98595</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>内核</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDA远程动态调试iOS程序</title>
    <link href="/2024/09/16/IDA%E8%BF%9C%E7%A8%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95iOS%E7%A8%8B%E5%BA%8F/"/>
    <url>/2024/09/16/IDA%E8%BF%9C%E7%A8%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95iOS%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="IDA远程动态调试iOS程序"><a href="#IDA远程动态调试iOS程序" class="headerlink" title="IDA远程动态调试iOS程序"></a>IDA远程动态调试iOS程序</h2><h3 id="一、准备工具"><a href="#一、准备工具" class="headerlink" title="一、准备工具"></a>一、准备工具</h3><ul><li><p>需要一定的逆向基础</p></li><li><p>XCode 14.3+目标project、IDA、已越狱的iPhone手机（博主用的是checkra1n+monkeydev）</p></li></ul><h3 id="二、调试"><a href="#二、调试" class="headerlink" title="二、调试"></a>二、调试</h3><ol><li><p>当Xcode+MonkeyDev在手机上运行project时，越狱文件夹下存在&#x2F;Developer&#x2F;usr&#x2F;bin&#x2F;debugserver，这是调试的前提；因为IDA 的dbgsvr已经删去了iPhoneServer，可以选择直接remote iOS debugger</p></li><li><p>在appDylib目录下新建cocoa touch class，在app加载时执行以下代码，得到目标project在手机的目录</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++">+ (<span class="hljs-type">void</span>)load &#123;<br>    NSString *exePath = [[NSBundle mainBundle] executablePath];<br>    <span class="hljs-built_in">NSLog</span>(@<span class="hljs-string">&quot;exePath %@\n&quot;</span>,exePath);<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">会得到以下日志：/private/var/containers/Bundle/Application/UUID/myAPP.app/myAPP</span><br><span class="hljs-comment">UUID：每次XCode重构项目都会新生成的一个ID</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li><li><p>IDA Debugger配置</p><p>Debugger选remote GDB debugger模式，（因为博主目前发现只能在这里面设置IP），打开手机-设置-网络，得到当前IP地址；然后在IDA-Debugger- Process options中填入hostaname，（跳过这一步的话，IDA会提示在本地mac寻找调试程序，但这里我们想要建立远程调试）</p><p>Debuuger选remote iOS debugger模式，进入Debugger- Process options，按照以下模式填写刚刚得到的路径</p><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/imgimage-20240820225022491.png" alt="image-20240820225022491"></p></li></ol><ul><li>进入Debugger-Debugger options- set specific options，填写Symbol Path，该符号目录在Mac上；查找该目录也很简单，在终端输入：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ~/Library/Developer/Xcode/<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># /Users/airh/Library/Developer/Xcode/iOS DeviceSupport/version/Symbols</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 这里的version是自己iPhone手机系统的版本号</span></span><br></code></pre></td></tr></table></figure><h3 id="附录：参考博客"><a href="#附录：参考博客" class="headerlink" title="附录：参考博客"></a>附录：参考博客</h3><p><a href="https://felipejfc.medium.com/the-ultimate-guide-for-live-debugging-apps-on-jailbroken-ios-12-4c5b48adf2fb">https://felipejfc.medium.com/the-ultimate-guide-for-live-debugging-apps-on-jailbroken-ios-12-4c5b48adf2fb</a></p><p><a href="https://hex-rays.com/wp-content/static/tutorials/ios_debugger_primer2/ios_debugger_primer2.html">https://hex-rays.com/wp-content/static/tutorials/ios_debugger_primer2/ios_debugger_primer2.html</a></p><p><a href="https://www.exchen.net/ida-70-ios-debugger.html">https://www.exchen.net/ida-70-ios-debugger.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>iOS逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>connect</title>
    <link href="/2024/09/16/connect/"/>
    <url>/2024/09/16/connect/</url>
    
    <content type="html"><![CDATA[<h3 id="Any-problems-connect-to-me"><a href="#Any-problems-connect-to-me" class="headerlink" title="Any problems connect to me"></a>Any problems connect to me</h3><h5 id="email-airhthmnoserch-163-com"><a href="#email-airhthmnoserch-163-com" class="headerlink" title="email:airhthmnoserch@163.com"></a>email:<a href="mailto:&#97;&#105;&#x72;&#x68;&#x74;&#x68;&#109;&#x6e;&#x6f;&#115;&#101;&#114;&#x63;&#x68;&#64;&#49;&#x36;&#51;&#46;&#99;&#x6f;&#109;">airhthmnoserch@163.com</a></h5>]]></content>
    
    
    
    <tags>
      
      <tag>email</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python-算法</title>
    <link href="/2024/05/10/python%E5%86%99%E7%AE%97%E6%B3%95%E6%97%A5%E8%AE%B0/"/>
    <url>/2024/05/10/python%E5%86%99%E7%AE%97%E6%B3%95%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><h4 id="写这篇博客的目的是博主觉得自己对python语法不够熟悉。。所以尝试通过leetcode写几道题熟悉一下列表-元组等类型的操作，但是写完感觉算法能力太弱了，写出来的代码不够简洁"><a href="#写这篇博客的目的是博主觉得自己对python语法不够熟悉。。所以尝试通过leetcode写几道题熟悉一下列表-元组等类型的操作，但是写完感觉算法能力太弱了，写出来的代码不够简洁" class="headerlink" title="写这篇博客的目的是博主觉得自己对python语法不够熟悉。。所以尝试通过leetcode写几道题熟悉一下列表&#x2F;元组等类型的操作，但是写完感觉算法能力太弱了，写出来的代码不够简洁"></a>写这篇博客的目的是博主觉得自己对python语法不够熟悉。。所以尝试通过leetcode写几道题熟悉一下列表&#x2F;元组等类型的操作，但是写完感觉算法能力太弱了，写出来的代码不够简洁</h4><h3 id="一、python的一些基本数据类型"><a href="#一、python的一些基本数据类型" class="headerlink" title="一、python的一些基本数据类型"></a>一、python的一些基本数据类型</h3><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">列表：用[]定义，类似于数组；用list()创建</span><br><span class="hljs-string">可变的数据类型：append\insert\clear\pop\remove\reverse\opy</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>lst=[<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;world&#x27;</span>,<span class="hljs-number">98.5</span>,<span class="hljs-number">77</span>]<br>lst1=<span class="hljs-built_in">list</span>(<span class="hljs-string">&quot;helloworld&quot;</span>)<br>lst2=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(lst)<br><span class="hljs-built_in">print</span>(lst1)<br><span class="hljs-built_in">print</span>(lst2)<br><span class="hljs-built_in">print</span>(lst+lst1+lst2)<br><span class="hljs-built_in">print</span>(lst*<span class="hljs-number">3</span>)<br><span class="hljs-comment">#删除列表</span><br><span class="hljs-keyword">del</span> lst<br><span class="hljs-comment">#列表的遍历：enumerate</span><br>lst=[<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;hh&#x27;</span>,<span class="hljs-string">&#x27;hhhh&#x27;</span>]<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> lst:<br>    <span class="hljs-built_in">print</span>(item)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(lst)):<br>    <span class="hljs-built_in">print</span>(lst[i])<br><span class="hljs-keyword">for</span> index,item <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(lst,start=<span class="hljs-number">1</span>):   <span class="hljs-comment">#start表示手动设置序列号</span><br>    <span class="hljs-built_in">print</span>(index,item)<br><span class="hljs-comment">#列表的一些操作</span><br>lst.append(<span class="hljs-string">&#x27;sql&#x27;</span>)   <span class="hljs-comment">#在结尾拼接</span><br>lst.insert(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>)   <span class="hljs-comment">#在1位插入100</span><br>lst.remove(<span class="hljs-string">&#x27;h&#x27;</span>)     <span class="hljs-comment">#删除h</span><br><span class="hljs-built_in">print</span>(lst)<br>lst.pop(<span class="hljs-number">3</span>)          <span class="hljs-comment">#将第三位取出</span><br>lst.reverse()       <span class="hljs-comment">#将列表逆序</span><br><span class="hljs-built_in">print</span>(lst)<br>new_list=lst.copy() <span class="hljs-comment">#创建新列表</span><br>lst.clear()         <span class="hljs-comment">#清空列表</span><br><span class="hljs-built_in">print</span>(new_list+lst)<br><span class="hljs-comment">#列表的排序操作：不会修改地址</span><br>lst=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]<br>lst.sort()<br><span class="hljs-built_in">print</span>(lst)<br>lst.sort(reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(lst)<br><br>lst1=[<span class="hljs-string">&#x27;apple&#x27;</span>,<span class="hljs-string">&#x27;Orange&#x27;</span>,<span class="hljs-string">&#x27;banana&#x27;</span>]<br>lst1.sort()<br><span class="hljs-built_in">print</span>(lst1)<br>lst1.sort(key=<span class="hljs-built_in">str</span>.lower)<span class="hljs-comment">#转化成小写进行比较</span><br><span class="hljs-built_in">print</span>(lst1)<br><span class="hljs-comment">#修改地址即产生新列表的排序</span><br>nwe_lst=<span class="hljs-built_in">sorted</span>(lst1)<br><span class="hljs-built_in">print</span>(lst1)<br><span class="hljs-built_in">print</span>(nwe_lst)<br><br><span class="hljs-comment">#列表生成式:lst=[exp for item in range if codition]</span><br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">del</span> lst<br>lst=[item <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">11</span>)]<br><span class="hljs-built_in">print</span>(lst)<br>lst.clear()<br>lst=[random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br><span class="hljs-built_in">print</span>(lst)<br>lst.clear()<br>lst=[i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>) <span class="hljs-keyword">if</span> i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(lst)<br></code></pre></td></tr></table></figure><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">元组：不可变序列，用()创建/用tuple创建</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>t=(<span class="hljs-string">&#x27;python&#x27;</span>,<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;world&#x27;</span>)<br>lst=[<span class="hljs-string">&#x27;python&#x27;</span>,<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;world&#x27;</span>]<br><span class="hljs-comment">#元组支持切片操作</span><br>t2=t[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>:<span class="hljs-number">2</span>]<br>lst2=lst[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>:<span class="hljs-number">2</span>]<br><span class="hljs-built_in">print</span>(t2)<br><span class="hljs-built_in">print</span>(lst2)<br><br><span class="hljs-comment">#元组生成式:生成了一个生成器对象，需要用tuple转化为元组</span><br><span class="hljs-keyword">del</span> t<br>t=(i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(t)<br>t=<span class="hljs-built_in">tuple</span>(t)<br><span class="hljs-built_in">print</span>(t)<br></code></pre></td></tr></table></figure><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">字典：可变序列，有点像指针：索引用的键和对应的值构成成对的关系</span><br><span class="hljs-string">特点：元组由于不可变，可以作为键,而列表不可以</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>d=&#123;<span class="hljs-number">10</span>:<span class="hljs-string">&#x27;cat&#x27;</span>,<span class="hljs-number">20</span>:<span class="hljs-string">&#x27;dog&#x27;</span>,<span class="hljs-number">30</span>:<span class="hljs-string">&#x27;pet&#x27;</span>,<span class="hljs-number">40</span>:<span class="hljs-string">&#x27;z00&#x27;</span>&#125;<br>lst1=[<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>]<br>lst2=[<span class="hljs-string">&#x27;cat&#x27;</span>,<span class="hljs-string">&#x27;dog&#x27;</span>,<span class="hljs-string">&#x27;pet&#x27;</span>,<span class="hljs-string">&#x27;z00&#x27;</span>]<br>zipobj=<span class="hljs-built_in">zip</span>(lst1,lst2)<br><span class="hljs-built_in">print</span>(zipobj)           <span class="hljs-comment">#映射结果是一个映射对象</span><br><span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> zipobj:<br>    <span class="hljs-built_in">print</span>(key,<span class="hljs-string">&#x27;---&#x27;</span>,value)<br><span class="hljs-comment">#print(list(zipobj))    #将映射对象转化为列表类型</span><br>othobj=<span class="hljs-built_in">dict</span>(zipobj)<br><span class="hljs-built_in">print</span>(othobj)<br><br><span class="hljs-comment">#字典的遍历</span><br>d=&#123;<span class="hljs-string">&#x27;hello&#x27;</span>:<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;world&#x27;</span>:<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;python&#x27;</span>:<span class="hljs-number">30</span>&#125;<br><span class="hljs-built_in">print</span>(d[<span class="hljs-string">&#x27;hello&#x27;</span>])<br><span class="hljs-built_in">print</span>(d.get(<span class="hljs-string">&#x27;java&#x27;</span>))<br><span class="hljs-built_in">print</span>(d.get(<span class="hljs-string">&#x27;java&#x27;</span>,<span class="hljs-string">&#x27;NONE&#x27;</span>))<br><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> d.items():<br>    <span class="hljs-built_in">print</span>(item)<br><span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> d.items():<br>    <span class="hljs-built_in">print</span>(key,<span class="hljs-string">&#x27;---&#x27;</span>,value)<br><span class="hljs-comment">#字典的相关操作</span><br>d=&#123;<span class="hljs-number">1001</span>:<span class="hljs-string">&#x27;limei&#x27;</span>,<span class="hljs-number">1002</span>:<span class="hljs-string">&#x27;wanghua&#x27;</span>,<span class="hljs-number">1003</span>:<span class="hljs-string">&#x27;zhangfeng&#x27;</span>&#125;<br>lst=<span class="hljs-built_in">list</span>(d.items())<br><span class="hljs-built_in">print</span>(lst)<br><span class="hljs-built_in">print</span>(d)<br><span class="hljs-comment">#字典生成式</span><br><span class="hljs-keyword">import</span> random<br>d=&#123;item:random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>) <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)&#125;<br><span class="hljs-built_in">print</span>(d)<br>lst1=[<span class="hljs-number">1001</span>,<span class="hljs-number">1002</span>,<span class="hljs-number">1003</span>,<span class="hljs-number">1004</span>]<br>lst2=[<span class="hljs-string">&#x27;chen&#x27;</span>,<span class="hljs-string">&#x27;yiyi&#x27;</span>,<span class="hljs-string">&#x27;lili&#x27;</span>]<br>dd=&#123;key:value <span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(lst1,lst2)&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">zip</span>(lst1,lst2))<br><span class="hljs-built_in">print</span>(dd)<br></code></pre></td></tr></table></figure><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">集合类型：可变数据类型，用&#123;&#125;定义，无序不重复序列</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment">#创建集合</span><br>s=&#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>&#125;<br><span class="hljs-comment">#只能存储不可变数据类型，比如说列表就不可以作为集合元素</span><br><span class="hljs-keyword">del</span> s<br>s=<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;HELOWORLD&#x27;</span>)<br>s1=<span class="hljs-built_in">set</span>([<span class="hljs-number">20</span>,<span class="hljs-number">23</span>,<span class="hljs-number">55</span>])<br>s2=<span class="hljs-built_in">set</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-built_in">print</span>(s2)<br></code></pre></td></tr></table></figure><h3 id="二、题目"><a href="#二、题目" class="headerlink" title="二、题目"></a>二、题目</h3><h4 id="解码方法"><a href="#解码方法" class="headerlink" title="解码方法"></a>解码方法</h4><h5 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h5><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240510220314465-615353360.png"></p><h5 id="2-思路：先将字符串转化为列表，其中字符’0‘必须跟在一个数字后面并且组成的数字"><a href="#2-思路：先将字符串转化为列表，其中字符’0‘必须跟在一个数字后面并且组成的数字" class="headerlink" title="2.思路：先将字符串转化为列表，其中字符’0‘必须跟在一个数字后面并且组成的数字&lt;26；接着使用递归，通过10&#x2F;20对列表进行分组然后将子列表传给counter函数进行计算解码方法总数，counter函数的具体实现：判断传入列表的长度进行对应的操作"></a>2.思路：先将字符串转化为列表，其中字符’0‘必须跟在一个数字后面并且组成的数字&lt;26；接着使用递归，通过10&#x2F;20对列表进行分组然后将子列表传给counter函数进行计算解码方法总数，counter函数的具体实现：判断传入列表的长度进行对应的操作</h5><h5 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#自己写的。。但是并没有解决问题</span><br><span class="hljs-comment">#递归-对长字符串而言使用递归时会导致timeout，效率非常低</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">numDecodings</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        ls=<span class="hljs-built_in">list</span>(s)<br>        newls=[]<br>        i=<span class="hljs-number">0</span><br>        <span class="hljs-comment">#如果以ls[0]==0,应该remove</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(ls[<span class="hljs-number">0</span>])==<span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-comment">#先得到列表，再对列表的字符进行分组</span><br>        <span class="hljs-keyword">while</span>(i&lt;<span class="hljs-built_in">len</span>(ls)):<br>            <span class="hljs-keyword">if</span> ls[i]==<span class="hljs-string">&#x27;0&#x27;</span>:<br>                <span class="hljs-comment">#newls的最末尾的索引不一定会是i-1</span><br>                newls[<span class="hljs-built_in">len</span>(newls)-<span class="hljs-number">1</span>]=<span class="hljs-built_in">int</span>(newls[<span class="hljs-built_in">len</span>(newls)-<span class="hljs-number">1</span>]*<span class="hljs-number">10</span>)<br>                <span class="hljs-keyword">if</span> newls[<span class="hljs-built_in">len</span>(newls)-<span class="hljs-number">1</span>]==<span class="hljs-number">200</span> <span class="hljs-keyword">or</span> newls[<span class="hljs-built_in">len</span>(newls)-<span class="hljs-number">1</span>]==<span class="hljs-number">100</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">elif</span> ls[i]!=<span class="hljs-string">&#x27;0&#x27;</span>:<br>                newls.append(<span class="hljs-built_in">int</span>(ls[i]))<br>            i+=<span class="hljs-number">1</span>  <br>        <span class="hljs-built_in">print</span>(newls)<br>        <span class="hljs-comment">#如果只有一个数并且为10/20</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(newls)==<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (newls[<span class="hljs-number">0</span>]==<span class="hljs-number">10</span> <span class="hljs-keyword">or</span> newls[<span class="hljs-number">0</span>]==<span class="hljs-number">20</span>):<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        <span class="hljs-comment">#递归得到长度     </span><br>        j=<span class="hljs-number">0</span><br>        count=<span class="hljs-number">1</span><br>        index=<span class="hljs-number">0</span><br>        <span class="hljs-comment">#分为几种情况：中间有10/20且以10/20结尾的；没有10/20；中间有10/20但不以10/20结尾的     </span><br>        <span class="hljs-keyword">while</span> j&lt;<span class="hljs-built_in">len</span>(newls):<br>            <span class="hljs-keyword">if</span> newls[j]==<span class="hljs-number">10</span> <span class="hljs-keyword">or</span> newls[j]==<span class="hljs-number">20</span>:<br>                <span class="hljs-comment">#以10/20开头的</span><br>                <span class="hljs-keyword">if</span> j==<span class="hljs-number">0</span>:<br>                    count*=<span class="hljs-number">1</span><br>                    index+=<span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    count*=Solution.counter(newls[index:j])<br>                    index=j+<span class="hljs-number">1</span><br>            j+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> index&lt;j+<span class="hljs-number">1</span>:<br>            count*=Solution.counter(newls[index:j])<br>        <span class="hljs-keyword">return</span> count<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">counter</span>(<span class="hljs-params">ls:<span class="hljs-built_in">list</span></span>)-&gt;<span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ls:<span class="hljs-comment">#传入的列表为空</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(ls)==<span class="hljs-number">1</span> :<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        <span class="hljs-comment">#判断并返回</span><br>        <br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ls)==<span class="hljs-number">3</span>:<br>            v1=<span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>,ls[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>])))<br>            v2=<span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>,ls[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>])))    <br>            <span class="hljs-keyword">if</span> v1&gt;<span class="hljs-number">26</span> <span class="hljs-keyword">and</span> v2&gt;<span class="hljs-number">26</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> v1&lt;=<span class="hljs-number">26</span> <span class="hljs-keyword">and</span> v2&lt;=<span class="hljs-number">26</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">3</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ls)==<span class="hljs-number">2</span>:<br>            v1=<span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>,ls[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>])))<br>            <span class="hljs-keyword">if</span> v1&lt;=<span class="hljs-number">26</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ls)==<span class="hljs-number">4</span> :<br>            tab=<span class="hljs-number">0</span><br>            v1=<span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>,ls[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>])))<br>            tab+=Solution.counter(ls[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>])<br>            <span class="hljs-keyword">if</span> v1&lt;=<span class="hljs-number">26</span>:<br>                tab+=(Solution.counter(ls[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>])*Solution.counter(ls[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>]))//<span class="hljs-number">2</span><br>            <span class="hljs-keyword">return</span> tab<br>        <span class="hljs-comment">#进行分组</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ls)&gt;<span class="hljs-number">4</span>:<br>            v1=<span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>,ls[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>])))<br>            fc=Solution.counter(ls[<span class="hljs-number">1</span>:<span class="hljs-built_in">len</span>(ls)])<br>            <span class="hljs-keyword">if</span> v1&lt;=<span class="hljs-number">26</span>:<br>                fc+=Solution.counter(ls[<span class="hljs-number">2</span>:<span class="hljs-built_in">len</span>(ls)])   <br>            <span class="hljs-keyword">return</span> fc<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#转载自评论区，侵权请联系博主删除</span><br><span class="hljs-comment">#思路：新建cnt列表，然后遍历字符串的每一个字符，记下截止该字符能进行的解码方法数，最后返回末尾的操作数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">numDecodings</span>(<span class="hljs-params">s:<span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    cnt = [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>] + [<span class="hljs-number">0</span>] * <span class="hljs-built_in">len</span>(s)<br>    s = <span class="hljs-string">&quot;99&quot;</span> + s <span class="hljs-comment">#添加虚拟头部，以便不用对头部做特殊处理</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-built_in">len</span>(s)):<br>        <span class="hljs-keyword">if</span>( <span class="hljs-number">10</span> &lt;= <span class="hljs-built_in">int</span>(s[i-<span class="hljs-number">1</span>:i+<span class="hljs-number">1</span>]) &lt;= <span class="hljs-number">26</span>): <span class="hljs-comment">#s[i]可与s[i-1]组合</span><br>            cnt[i] += cnt[i-<span class="hljs-number">2</span>]<br>        <span class="hljs-keyword">if</span>(s[i] != <span class="hljs-string">&#x27;0&#x27;</span>): <span class="hljs-comment">#s[i]可单独解码</span><br>            cnt[i] += cnt[i-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> cnt[-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><h4 id="合并区间"><a href="#合并区间" class="headerlink" title="合并区间"></a>合并区间</h4><h5 id="1-题目描述：以数组-intervals-表示若干个区间的集合，其中单个区间为-intervals-i-starti-endi-。请你合并所有重叠的区间，并返回-一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间"><a href="#1-题目描述：以数组-intervals-表示若干个区间的集合，其中单个区间为-intervals-i-starti-endi-。请你合并所有重叠的区间，并返回-一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间" class="headerlink" title="1.题目描述：以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] = [starti, endi] 。请你合并所有重叠的区间，并返回 一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间"></a>1.题目描述：以数组 <code>intervals</code> 表示若干个区间的集合，其中单个区间为 <code>intervals[i] = [starti, endi]</code> 。请你合并所有重叠的区间，并返回 <em>一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间</em></h5><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240510220334155-811584603.png"></p><h5 id="2-思路：递归（二路归并的思想）没解决，但是写着写着对题目的理解就搞混了，所以也并没有实现。"><a href="#2-思路：递归（二路归并的思想）没解决，但是写着写着对题目的理解就搞混了，所以也并没有实现。" class="headerlink" title="2.思路：递归（二路归并的思想）没解决，但是写着写着对题目的理解就搞混了，所以也并没有实现。"></a>2.思路：递归（二路归并的思想）没解决，但是写着写着对题目的理解就搞混了，所以也并没有实现。</h5><h5 id="3-代码实现-1"><a href="#3-代码实现-1" class="headerlink" title="3.代码实现"></a>3.代码实现</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#！！！！并没有解决题目</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">devide</span>(<span class="hljs-params">intervals:<span class="hljs-built_in">list</span></span>)-&gt;<span class="hljs-built_in">list</span>:<br>        result=[]<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(intervals)==<span class="hljs-number">1</span>:<br>            result.append(intervals[<span class="hljs-number">0</span>])<br>            <span class="hljs-keyword">return</span> result<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(intervals)==<span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">if</span> intervals[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]&gt;=intervals[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] <span class="hljs-keyword">and</span> intervals[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]&lt;=intervals[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]:<br>                <span class="hljs-keyword">if</span> intervals[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]&lt;=intervals[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]:<br>                    result.append([intervals[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>],intervals[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]])<br>                    <span class="hljs-keyword">return</span> result<br>                <span class="hljs-keyword">elif</span> intervals[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]&gt;intervals[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]:<br>                    result.append([intervals[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>],intervals[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]])<br>                    <span class="hljs-keyword">return</span> result<br>            <span class="hljs-keyword">elif</span> intervals[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]&gt;=intervals[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] <span class="hljs-keyword">and</span> intervals[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]&gt;intervals[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]:<br>                <span class="hljs-keyword">if</span> intervals[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]==intervals[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]:<br>                    result.extend(intervals[<span class="hljs-number">1</span>::-<span class="hljs-number">1</span>]) <span class="hljs-comment">#append intervals[1]-intervals[0]</span><br>                    <span class="hljs-keyword">return</span> result<br>                <span class="hljs-keyword">if</span> intervals[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]&lt;=intervals[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]:<br>                    result.append([intervals[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>],intervals[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]])<br>                    <span class="hljs-keyword">return</span> result<br>                <span class="hljs-keyword">elif</span> intervals[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]&gt;intervals[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]:<br>                    result.append([intervals[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>],intervals[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]])<br>                    <span class="hljs-keyword">return</span> result             <br>                <span class="hljs-keyword">return</span> result<br>            <span class="hljs-keyword">else</span>:<br>                result.extend(intervals[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>])<br>                <span class="hljs-keyword">return</span> result<br><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(intervals)==<span class="hljs-number">3</span>:<br>            item3=[]<br>            item3=Solution.devide(intervals[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>])<br>            <span class="hljs-comment">#如果是两个列表传过去，只会返回两种情况：只剩下一个列表，或者因为其中一个列表的元素 而相同返回两个排好序列表</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(item3)==<span class="hljs-number">1</span>):<br>                item33=[item3[<span class="hljs-number">0</span>],intervals[<span class="hljs-number">2</span>]]<br>                item33r=[]<br>                item33r.extend(Solution.devide(item33))<br>                <span class="hljs-keyword">return</span> item33r<br>            <span class="hljs-keyword">elif</span>(<span class="hljs-built_in">len</span>(item3)==<span class="hljs-number">2</span>):<br>                item34=[item3[<span class="hljs-number">1</span>],intervals[<span class="hljs-number">2</span>]]<br>                item34r=[]<br>                item34r.append(item3[<span class="hljs-number">0</span>])<br>                item34r.extend(Solution.devide(item34))<br>                <span class="hljs-keyword">return</span> item34r<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(intervals)&gt;<span class="hljs-number">3</span>:<br>            result.extend(Solution.devide(intervals[<span class="hljs-number">0</span>:<span class="hljs-built_in">int</span>(<span class="hljs-built_in">len</span>(intervals)/<span class="hljs-number">2</span>)]))<br>            result.extend(Solution.devide(intervals[<span class="hljs-built_in">int</span>(<span class="hljs-built_in">len</span>(intervals)/<span class="hljs-number">2</span>):<span class="hljs-built_in">len</span>(intervals)]))<br>            <span class="hljs-keyword">return</span> result<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">self, intervals: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        result=Solution.devide(intervals)<br>        <span class="hljs-keyword">return</span> result<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#来自评论区，侵权请联系博主删除</span><br><span class="hljs-comment">#思路：使用lambda函数先对intervals这个二维列表进行排序，排序的根据是子列表的第一个数；接着进行合并，合并规则是如果两个区间没有</span><br><span class="hljs-comment">#重合则在合并列表后append，重叠的话就进行合并</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">self, intervals: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        intervals.sort(key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">0</span>])<br>        merged = []<br>        <span class="hljs-keyword">for</span> interval <span class="hljs-keyword">in</span> intervals:<br>            <span class="hljs-comment"># 如果列表为空,或者当前区间与上一区间不重合,直接添加</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> merged <span class="hljs-keyword">or</span> merged[-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] &lt; interval[<span class="hljs-number">0</span>]:<br>                merged.append(interval)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 否则的话,我们就可以与上一区间进行合并</span><br>                merged[-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(merged[-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>], interval[<span class="hljs-number">1</span>])<br><br>        <span class="hljs-keyword">return</span> merged<br></code></pre></td></tr></table></figure><h5 id="4-lambda函数的学习"><a href="#4-lambda函数的学习" class="headerlink" title="4.lambda函数的学习"></a>4.lambda函数的学习</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#lambda函数的使用</span><br><br><span class="hljs-comment">#-1 一行函数</span><br>add=<span class="hljs-keyword">lambda</span> x,y:x+y<br>result=add(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(result)<br><br><span class="hljs-comment">#-2 作为参数传给高阶函数 </span><br><span class="hljs-comment"># map(function,iterable)，map的返回值为iterator，如果需要打印需要转化为列表</span><br>nums=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>result2=[item <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x:x**<span class="hljs-number">2</span>,nums)]<br>result22=<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x:x**<span class="hljs-number">2</span>,nums)<br><span class="hljs-built_in">print</span>(result2)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(result22))<br><br><span class="hljs-comment">#-3 用于排序</span><br>nums3=[[<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>],[<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>],[<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]]<br>nums3.sort(key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">0</span>])<br><span class="hljs-comment">#nums3.sort(key=lambda x:x) </span><br><span class="hljs-comment">#第一种写法根据x[][0]进行排序，第二种写法根据x[]进行排序</span><br><span class="hljs-built_in">print</span>(nums3)<br>nums33=[[<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>],[<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>],[<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]]<br>nums33.sort(key=<span class="hljs-keyword">lambda</span> x:(x.sort(),x[<span class="hljs-number">0</span>]))  <br><span class="hljs-built_in">print</span>(nums33)<br></code></pre></td></tr></table></figure><h4 id="字符串转整数"><a href="#字符串转整数" class="headerlink" title="字符串转整数"></a>字符串转整数</h4><h5 id="1-题目描述：请你来实现一个-myAtoi-string-s-函数，使其能将字符串转换成一个-32-位有符号整数（类似-C-C-中的-atoi-函数）"><a href="#1-题目描述：请你来实现一个-myAtoi-string-s-函数，使其能将字符串转换成一个-32-位有符号整数（类似-C-C-中的-atoi-函数）" class="headerlink" title="1.题目描述：请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C&#x2F;C++ 中的 atoi 函数）"></a>1.题目描述：请你来实现一个 <code>myAtoi(string s)</code> 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C&#x2F;C++ 中的 <code>atoi</code> 函数）</h5><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240510220357802-1816427993.png"></p><h5 id="2-思路：感觉这题有点咬文嚼字-，除去所有不能转化为数字的字符串的情况就可以进行拼接了"><a href="#2-思路：感觉这题有点咬文嚼字-，除去所有不能转化为数字的字符串的情况就可以进行拼接了" class="headerlink" title="2.思路：感觉这题有点咬文嚼字&#x3D;_&#x3D;，除去所有不能转化为数字的字符串的情况就可以进行拼接了"></a>2.思路：感觉这题有点咬文嚼字&#x3D;_&#x3D;，除去所有不能转化为数字的字符串的情况就可以进行拼接了</h5><h5 id="3-代码实现-2"><a href="#3-代码实现-2" class="headerlink" title="3.代码实现"></a>3.代码实现</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">myAtoi</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-comment">#空字符串，返回0</span><br>        <span class="hljs-keyword">if</span> s==<span class="hljs-string">&quot;&quot;</span>:<br>           <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-comment">#如果不以数字/空格/+/-开头，均返回0</span><br>        <span class="hljs-keyword">if</span> s[<span class="hljs-number">0</span>].isdigit()==<span class="hljs-literal">False</span> <span class="hljs-keyword">and</span> s[<span class="hljs-number">0</span>]!=<span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-keyword">and</span> s[<span class="hljs-number">0</span>]!=<span class="hljs-string">&#x27;+&#x27;</span> <span class="hljs-keyword">and</span> s[<span class="hljs-number">0</span>]!=<span class="hljs-string">&#x27;-&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        ss = <span class="hljs-built_in">list</span>(s)<br>        i = <span class="hljs-number">0</span><br>        ii = <span class="hljs-number">0</span><br><span class="hljs-comment"># 先遍历前面不为数字的字符</span><br>        <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(ss) <span class="hljs-keyword">and</span> (ss[i] &gt; <span class="hljs-string">&#x27;9&#x27;</span> <span class="hljs-keyword">or</span> ss[i] &lt; <span class="hljs-string">&#x27;0&#x27;</span>):<br>            <span class="hljs-comment">#判断数字前的字符是否均为字母</span><br>            <span class="hljs-keyword">if</span> s[i].isalpha()==<span class="hljs-literal">True</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            i += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> i &lt; <span class="hljs-built_in">len</span>(ss):<br>            index=s.find(<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-number">0</span>,i)<br>            index1=s.find(<span class="hljs-string">&#x27;+&#x27;</span>,<span class="hljs-number">0</span>,i)<br>            <span class="hljs-comment">#如果同时出现+/-，返回0</span><br>            <span class="hljs-keyword">if</span> index!=-<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> index1!=-<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            <span class="hljs-comment">#如果+/-后面不是数字，返回0</span><br>            <span class="hljs-keyword">if</span> (index1&gt;<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> s[index1+<span class="hljs-number">1</span>].isdigit()==<span class="hljs-literal">False</span>) <span class="hljs-keyword">or</span> (index&gt;<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> s[index+<span class="hljs-number">1</span>].isdigit()==<span class="hljs-literal">False</span>):<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            <span class="hljs-comment">#如果存在 -</span><br>            <span class="hljs-keyword">if</span> index&gt;=<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(ss) <span class="hljs-keyword">and</span> ss[i] &lt;= <span class="hljs-string">&#x27;9&#x27;</span> <span class="hljs-keyword">and</span> ss[i] &gt;= <span class="hljs-string">&#x27;0&#x27;</span>:<br>                    ii = ii * <span class="hljs-number">10</span> + <span class="hljs-built_in">int</span>(ss[i])<br>                    i += <span class="hljs-number">1</span><br>                ii=<span class="hljs-number">0</span>-ii<br>            <span class="hljs-keyword">elif</span> index&lt;<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(ss) <span class="hljs-keyword">and</span> ss[i] &lt;= <span class="hljs-string">&#x27;9&#x27;</span> <span class="hljs-keyword">and</span> ss[i] &gt;= <span class="hljs-string">&#x27;0&#x27;</span>:<br>                    ii = ii * <span class="hljs-number">10</span> + <span class="hljs-built_in">int</span>(ss[i])<br>                    i += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> ii&gt;<span class="hljs-number">2</span>**<span class="hljs-number">31</span>-<span class="hljs-number">1</span>:<br>            ii=<span class="hljs-number">2</span>**<span class="hljs-number">31</span>-<span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> ii&lt;<span class="hljs-number">0</span>-<span class="hljs-number">2</span>**<span class="hljs-number">31</span>:<br>            ii=<span class="hljs-number">0</span>-<span class="hljs-number">2</span>**<span class="hljs-number">31</span><br>        <span class="hljs-keyword">return</span> ii<br><br></code></pre></td></tr></table></figure><h4 id="无重复字符的最长字串"><a href="#无重复字符的最长字串" class="headerlink" title="无重复字符的最长字串"></a>无重复字符的最长字串</h4><h5 id="1-题目描述：给定一个字符串-s-，请你找出其中不含有重复字符的最长子串的长度。"><a href="#1-题目描述：给定一个字符串-s-，请你找出其中不含有重复字符的最长子串的长度。" class="headerlink" title="1.题目描述：给定一个字符串 s ，请你找出其中不含有重复字符的最长子串的长度。"></a>1.题目描述：给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的最长子串的长度。</h5><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240510220412404-1794337314.png"></p><h5 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lengthOfLongestSubstring</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        ss=<span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-built_in">max</span>=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>            <span class="hljs-keyword">if</span> s[i] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> ss:<br>                ss+=s[i]<br>            <span class="hljs-keyword">elif</span> s[i] <span class="hljs-keyword">in</span> ss:<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">max</span>&lt;<span class="hljs-built_in">len</span>(ss):<br>                    <span class="hljs-built_in">max</span>=<span class="hljs-built_in">len</span>(ss)<br>                <br>                <span class="hljs-comment">#应该向前遍历一遍，将重复字符后的不重复字符加入</span><br>                ss=<span class="hljs-string">&quot;&quot;</span><br>                tmp=i<br>                <span class="hljs-keyword">while</span> i-<span class="hljs-number">1</span>&gt;=<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> s[tmp-<span class="hljs-number">1</span>]!=s[i]:<br>                    ss+=s[tmp-<span class="hljs-number">1</span>]<br>                    tmp-=<span class="hljs-number">1</span><br>                ss=ss[::-<span class="hljs-number">1</span>]<br>                ss+=s[i]<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">max</span>&lt;<span class="hljs-built_in">len</span>(ss):<br>            <span class="hljs-built_in">max</span>=<span class="hljs-built_in">len</span>(ss)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span><br></code></pre></td></tr></table></figure><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><h5 id="总结：学会了列表-元组这类迭代器的一些基本操作，以及lambda函数-map-func-iterable-append-extend等函数的使用，有时候新建一些数组来存放新内容要比递归高效率。在使用python时多思考方法，因为python有很多意想不到的库函数可以解决复杂问题"><a href="#总结：学会了列表-元组这类迭代器的一些基本操作，以及lambda函数-map-func-iterable-append-extend等函数的使用，有时候新建一些数组来存放新内容要比递归高效率。在使用python时多思考方法，因为python有很多意想不到的库函数可以解决复杂问题" class="headerlink" title="总结：学会了列表&#x2F;元组这类迭代器的一些基本操作，以及lambda函数&#x2F;map(func,iterable)&#x2F;append&#x2F;extend等函数的使用，有时候新建一些数组来存放新内容要比递归高效率。在使用python时多思考方法，因为python有很多意想不到的库函数可以解决复杂问题"></a>总结：学会了列表&#x2F;元组这类迭代器的一些基本操作，以及lambda函数&#x2F;map(func,iterable)&#x2F;append&#x2F;extend等函数的使用，有时候新建一些数组来存放新内容要比递归高效率。在使用python时多思考方法，因为python有很多意想不到的库函数可以解决复杂问题</h5>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vctf2024-vm</title>
    <link href="/2024/04/22/vctf2024-vm/"/>
    <url>/2024/04/22/vctf2024-vm/</url>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="vctf2024-vm"><a href="#vctf2024-vm" class="headerlink" title="vctf2024-vm"></a>vctf2024-vm</h2><h3 id="一-vctf2024vm题的题解，一直没有整理，是赛后看大佬wp才知道是upx魔改-rc4的。。"><a href="#一-vctf2024vm题的题解，一直没有整理，是赛后看大佬wp才知道是upx魔改-rc4的。。" class="headerlink" title="一.vctf2024vm题的题解，一直没有整理，是赛后看大佬wp才知道是upx魔改+rc4的。。"></a>一.vctf2024vm题的题解，一直没有整理，是赛后看大佬wp才知道是upx魔改+rc4的。。</h3><h3 id="二-去upx魔改"><a href="#二-去upx魔改" class="headerlink" title="二.去upx魔改"></a>二.去upx魔改</h3><h4 id="1-去upx魔改："><a href="#1-去upx魔改：" class="headerlink" title="1.去upx魔改："></a>1.去upx魔改：</h4><p><a href="https://blog.csdn.net/xianyu_yuan/article/details/136901918">VCTF 2024 ezvm (虚拟机逆向初探)_vctf vm-CSDN博客</a></p><p>[<a href="https://bbs.kanxue.com/thread-275753.htm#msg_header_h1_0">原创] UPX源码学习和简单修改-加壳脱壳-看雪-安全社区|安全招聘|kanxue.com</a></p><p>加壳流程：（博客总结）</p><p>a.写入文件的elf头与程序表头，写入I_info结构</p><p>b.对每个PT_LOAD的段进行压缩存储，其中第一个PT_LOAD&#x3D;elf头+程序头表+其他数据</p><p>c.压缩存储其他段</p><p>d.写入其他数据-PackerHeader和overlay_offset，其中overlay_offset是I-info的偏移值，一般为F4 00 00 00</p><h3 id="三-vm分析"><a href="#三-vm分析" class="headerlink" title="三.vm分析"></a>三.vm分析</h3><h4 id="1）定义关键结构体：动调程序将函数参数的int-v1修改成-cpu-v1"><a href="#1）定义关键结构体：动调程序将函数参数的int-v1修改成-cpu-v1" class="headerlink" title="1）定义关键结构体：动调程序将函数参数的int v1修改成_cpu* v1"></a>1）定义关键结构体：动调程序将函数参数的int v1修改成_cpu* v1</h4><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240422160249439-1411686812.png"></p><p>（ 指路之前博客：<a href="https://www.cnblogs.com/a1rhthm/p/18092363">https://www.cnblogs.com/a1rhthm/p/18092363</a><br>b站大佬的讲解：<a href="https://www.bilibili.com/video/BV1gv4y1u7t1?vd_source=69ffcd703762aa7a204e6cc6f57ba69d">https://www.bilibili.com/video/BV1gv4y1u7t1?vd_source=69ffcd703762aa7a204e6cc6f57ba69d</a> ）</p><h4 id="2）dump下关键指令并跟踪程序指令，查看每一步进行的操作，先跟进第一个opcode指令，观察数据变化"><a href="#2）dump下关键指令并跟踪程序指令，查看每一步进行的操作，先跟进第一个opcode指令，观察数据变化" class="headerlink" title="2）dump下关键指令并跟踪程序指令，查看每一步进行的操作，先跟进第一个opcode指令，观察数据变化"></a>2）dump下关键指令并跟踪程序指令，查看每一步进行的操作，先跟进第一个opcode指令，观察数据变化</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs markdown">//第一处循环：为了方便理解，由于反汇编代码中存在大量的类型转换，这里的eax[0]指的是低位八字节，eax[1]指的是高位八字节，与下文给出的脚本中的高低位相反<br>0xF0, 0xE0, 0x02, 0x00, <br>0xF0, 0xE0, 0x00, 0xE0, 0x02, //eax=1 03 00 00 00 73h, eax=1 03 00 00 00 04h<br>0xF0, 0xE1, 0xE0, 0x02, 0xE0, 0x02, //eax不变<br>0xF0, 0xE0, 0x01, 0x10, <br>0xF2, 0xE0, 0x00, 0xE0, 0x01, <br>0xF1, 0xE0, 0x00, 0x20, 0x02, <br>0xF0, 0xE0, 0x00, 0xE1, 0xE0, 0x00, //eax=10 00 00 02 24   eax[0]=v3=0x5F  eax=10 00 00 00 5Fh<br>0xF0, 0xE0, 0x01, 0xE0, 0x02, //eax=10 00 00 00 5F   eax[1]=eax[2]   eax=10 00 00 00 5F <br>0xF1, 0xE0, 0x01, 0x00, 0x01, //v3=1, v1=(1+4)&lt;&lt;8+eip[3]+eax[v3]=0x104,  eax[1]=v3,<br><span class="hljs-code">//eax=104 0000005F这里有个dword*，是双字 占四个字节</span><br><span class="hljs-code">0xF0, 0xE1, 0xE0, 0x01, 0xE0, 0x00, //eax不变，修改s的值，s存放的应该是个字符串</span><br><span class="hljs-code">0xF3, 0xE0, 0x02, //(Dword*)eax[2]++,eax不变，eax=1040000005Fh,但(Dword*)eax[2]</span><br><span class="hljs-code">//指向ebx，实际上是ebx++</span><br><span class="hljs-code">0xF6, 0xE0, 0x02, 0x00, 0x01, //ebx&lt;256</span><br><span class="hljs-code">0xF7, 0x04, //跳转到第一条opcode，这是个循环指令，ebx用来记录循环次数</span><br><span class="hljs-code"></span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240422160346834-829040274.png"></p><h4 id="3）写个脚本查看一下eax的变化"><a href="#3）写个脚本查看一下eax的变化" class="headerlink" title="3）写个脚本查看一下eax的变化"></a>3）写个脚本查看一下eax的变化</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-comment">//第一段循环的脚本，查看数组的变化以及_eax的值</span><br><br><span class="hljs-function"><span class="hljs-type">int</span>  <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">定义了三个寄存器eax,ebx,ecx,都是dq也就是8字节的int64类型</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">由于在反汇编代码中存在类型转换，在此脚本中eax[0]代表eax的高位，eax[1]代表的是eax的低位，eax[2]则代表ebx</span><br><span class="hljs-comment">(eax[0]&lt;&lt;8)|eax[1]=eax</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> opcode[] = &#123;<br><span class="hljs-number">0xF0</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x00</span>,<span class="hljs-comment">//第一次循环</span><br><br><span class="hljs-number">0xF0</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x02</span>, <br><span class="hljs-number">0xF0</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x02</span>, <br><span class="hljs-number">0xF0</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x10</span>,<br><span class="hljs-number">0xF2</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x01</span>,<br><span class="hljs-number">0xF1</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x02</span>,<br><span class="hljs-number">0xF0</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x00</span>, <br><span class="hljs-number">0xF0</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x02</span>, <br><span class="hljs-number">0xF1</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <br><span class="hljs-number">0xF0</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x00</span>, <br><span class="hljs-number">0xF3</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x02</span>, <br><span class="hljs-number">0xF6</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <br><span class="hljs-number">0xF7</span>, <span class="hljs-number">0x04</span>, <br><span class="hljs-number">0xF0</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x00</span>,<br><span class="hljs-number">0xF0</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>,<br><span class="hljs-number">0xF0</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x02</span>,<span class="hljs-comment">//循环跳转处</span><br><span class="hljs-number">0xF1</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x00</span>,<br><span class="hljs-number">0xF0</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x02</span>,<br><span class="hljs-number">0xF1</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>,<br><span class="hljs-number">0xF0</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x00</span>,<br><span class="hljs-number">0xF1</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x00</span>,<br><span class="hljs-number">0xF2</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>,<br><span class="hljs-number">0xF0</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x02</span>,<br><span class="hljs-number">0xF0</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x03</span>,<br><span class="hljs-number">0xF0</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x00</span>,<br><span class="hljs-number">0xF0</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x01</span>,<br><span class="hljs-number">0xF3</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x02</span>,<br><span class="hljs-number">0xF6</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-comment">//这里也是循环256次</span><br><span class="hljs-number">0xF7</span>, <span class="hljs-number">0x45</span>,<br>&#125;;<br><span class="hljs-type">long</span> eax[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> ebx = <span class="hljs-number">0</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> s[<span class="hljs-number">600</span>] = &#123; <span class="hljs-number">0</span> &#125;;<span class="hljs-comment">//在动调vm过程中还会观察到对一个数组进行了初始化</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> enc[<span class="hljs-number">16</span>] = &#123; <br><span class="hljs-number">0x54</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x31</span>,<br><span class="hljs-number">0x6C</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x67</span> &#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">256</span>;i++)      <span class="hljs-comment">//下面的操作都是根据opcode操作读取出来的，所以看不懂的话可以尝试自己动调一遍vm并观察内存变化</span><br>&#123;<br>eax[<span class="hljs-number">1</span>] = ebx;<br>s[ebx] = ebx;<br>eax[<span class="hljs-number">0</span>] = <span class="hljs-number">0x10</span>;<span class="hljs-comment">//0是高位</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v1 = eax[<span class="hljs-number">1</span>] % eax[<span class="hljs-number">0</span>];<br>eax[<span class="hljs-number">1</span>] = v1;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v2 = (<span class="hljs-number">2</span> &lt;&lt; <span class="hljs-number">8</span>) + <span class="hljs-number">0x20</span> + eax[<span class="hljs-number">1</span>]; <br>eax[<span class="hljs-number">1</span>] = v2;<br><span class="hljs-type">unsigned</span> v3 = enc[i%<span class="hljs-number">16</span>]; <br>eax[<span class="hljs-number">1</span>] = v3; <br>eax[<span class="hljs-number">0</span>] = ebx;<br>eax[<span class="hljs-number">0</span>] = (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">8</span>) + <span class="hljs-number">0</span> + eax[<span class="hljs-number">0</span>];<br>s[eax[<span class="hljs-number">0</span>]] = enc[i%<span class="hljs-number">16</span>];<br>ebx++;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;当前eax的值为：0x%x%x\n&quot;</span>, eax[<span class="hljs-number">0</span>]&lt;&lt;<span class="hljs-number">20</span>,eax[<span class="hljs-number">1</span>]);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">600</span>; i++) &#123;<br><span class="hljs-keyword">if</span> (i % <span class="hljs-number">16</span> == <span class="hljs-number">0</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%-d  &quot;</span>,s[i]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240422160406264-1453756349.png"></p><h4 id="4）同理根据F0-F6函数进行的操作，对每段opcode进行解读"><a href="#4）同理根据F0-F6函数进行的操作，对每段opcode进行解读" class="headerlink" title="4）同理根据F0-F6函数进行的操作，对每段opcode进行解读"></a>4）同理根据F0-F6函数进行的操作，对每段opcode进行解读</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs markdown">//第二处循环：<br>0xF0, 0xE0, 0x00, 0xE1, 0xE0, 0x02,//循环跳转处:以下已经过高低位处理<br>0xF1, 0xE0, 0x03, 0xE0, 0x00,//v3=3,v1=eax[1]+ecx,ecx=v1<br>0xF0, 0xE0, 0x00, 0xE1, 0x02,//eax[1]=ebx<br>0xF1, 0xE0, 0x00, 0x00, 0x01,//v3=0,v1=1&lt;&lt;8+0+eax[1],eax[1]=v1<br>0xF0, 0xE0, 0x00, 0xE1, 0xE0, 0x00,//v2=0xE0,v3=s[eax[0]],eax[1]=v3<br>0xF1, 0xE0, 0x03, 0xE0, 0x00,//v3=3,v1=eax[1]+ecx<br>0xF2, 0xE0, 0x03, 0x00, 0x01,//v3=3,v1=ecx%(1&lt;&lt;8)+0,ecx=v1<br>0xF0, 0xE0, 0x00, 0xE1, 0xE0, 0x02,//v2=0xE0,v3=s[ecx],eax[1]=v3=s[ecx]<br>0xF0, 0xE0, 0x01, 0xE1, 0xE0, 0x03,    //v2=0xE0,v3=s[(int)ecx+1],eax[0]=v3=s[ecx+1]<br>0xF0, 0xE1, 0xE0, 0x03, 0xE0, 0x00,//v2=0xE1,s[ecx+1]=eax[1]<br>0xF0, 0xE1, 0xE0, 0x02, 0xE0, 0x01,//v2=0xE1,s[ecx]=eax[0]<br>0xF3, 0xE0, 0x02,//ebx++<br>0xF6, 0xE0, 0x02, 0x00, 0x01, //这里也是循环256次,ecx=1<br>0xF7, 0x45,<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs markdown">//修正后：第二处循环：<br>0xF0, 0xE0, 0x00, 0xE1, 0xE0, 0x02,//循环跳转处:以下已经过高低位处理<br>0xF1, 0xE0, 0x03, 0xE0, 0x00,//ecx=eax[1]+ecx<br>0xF0, 0xE0, 0x00, 0xE1, 0x02,//eax[1]=ebx<br>0xF1, 0xE0, 0x00, 0x00, 0x01,//eax[1]=256+eax[1]<br>0xF0, 0xE0, 0x00, 0xE1, 0xE0, 0x00,//eax[1]=s[eax[1]]<br>0xF1, 0xE0, 0x03, 0xE0, 0x00,//ecx=eax[1]+ecx<br>0xF2, 0xE0, 0x03, 0x00, 0x01,//ecx=ecx%256<br>//这里循环交换了s[i]与s[i+1]的值<br>0xF0, 0xE0, 0x00, 0xE1, 0xE0, 0x02,//eax[1]=s[ecx]<br>0xF0, 0xE0, 0x01, 0xE1, 0xE0, 0x03,//eax[0]=s[ecx+1]<br>0xF0, 0xE1, 0xE0, 0x03, 0xE0, 0x00,//s[ecx+1]=eax[1]<br>0xF0, 0xE1, 0xE0, 0x02, 0xE0, 0x01,//s[ecx]=eax[0]<br><br>0xF3, 0xE0, 0x02,//ebx++<br>0xF6, 0xE0, 0x02, 0x00, 0x01, //这里也是循环256次,ecx=1<br>0xF7, 0x45,<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs markdown">0xF0, 0xE0, 0x02, 0x00,//ebx=0<br>0xF0, 0xE0, 0x03, 0x00,//ecx=0<br>//第三处循环<br>0xF3, 0xE0, 0x02,//ebx++<br>0xF2, 0xE0, 0x02, 0x00, 0x01,//ebx=ebx%256,<br><br>0xF0, 0xE0, 0x00, 0xE1, 0xE0, 0x02,//eax[1]=s[ecx]<br>0xF1, 0xE0, 0x03, 0xE0, 0x00,//ecx=eax[1]+ecx,<br>0xF2, 0xE0, 0x03, 0x00, 0x01,//ecx=ecx%256<br><br>0xF0, 0xE0, 0x00, 0xE1, 0xE0, 0x02,//eax[1]=s[ecx]<br>0xF0, 0xE0, 0x01, 0xE1, 0xE0, 0x03,//eax[0]=s[ecx+1]<br>0xF0, 0xE1, 0xE0, 0x03, 0xE0, 0x00,//s[ecx+1]=eax[1]<br>0xF0, 0xE1, 0xE0, 0x02, 0xE0, 0x01,//s[ecx]=eax[0]<br><br>0xF1, 0xE0, 0x00, 0xE0, 0x01,//eax[1]=eax[0]+eax[1]<br>0xF2, 0xE0, 0x00, 0x00, 0x01,//eax[1]=eax[1]%256<br><br>0xF0, 0xE0, 0x00, 0xE1, 0xE0, 0x00,//eax[1]=s[eax[1]]<br>0xF0, 0xE0, 0x01, 0xE0, 0x02,//eax[0]=ebx<br>0xF4, 0xE0, 0x01,//eax[0]--<br>0xF1, 0xE0, 0x01, 0x00, 0x02,//eax[0]=512+eax[0]<br>0xF0, 0xE0, 0x01, 0xE1, 0xE0, 0x01,//eax[0]=s[ebx]<br>0xF5, 0xE0, 0x00, 0xE0, 0x01,//eax[1]^=eax[0]:eax[1]存放的是加密后的数据<br><br>0xF1, 0xE0, 0x00, 0xE0, 0x02,//eax[1]=ebx+eax[1]:eax[1]+i<br>0xF0, 0xE0, 0x01, 0xE0, 0x02,//eax[0]=ebx+eax[0]<br>0xF4, 0xE0, 0x01,//eax[0]--<br>0xF1, 0xE0, 0x01, 0x00, 0x02,//eax[0]=ebx+eax[0]<br>0xF0, 0xE1, 0xE0, 0x01, 0xE0, 0x00,//s[ebx]=eax[1]:将加密后的数据存放到s[ebx]中<br>0xF0, 0xE0, 0x01, 0xE0, 0x02,//eax[0]=ebx<br>0xF4, 0xE0, 0x01,//eax[0]--<br><br>0xF6, 0xE0, 0x01, 0x20, 0x00,//循环32次<br>0xF7, 0x94,<br></code></pre></td></tr></table></figure><h4 id="5）可以看出来进行了三次循环，前两处opcode循环进行了256次，第三处循环进行了32次，并且有rc4加密的特征"><a href="#5）可以看出来进行了三次循环，前两处opcode循环进行了256次，第三处循环进行了32次，并且有rc4加密的特征" class="headerlink" title="5）可以看出来进行了三次循环，前两处opcode循环进行了256次，第三处循环进行了32次，并且有rc4加密的特征"></a>5）可以看出来进行了三次循环，前两处opcode循环进行了256次，第三处循环进行了32次，并且有rc4加密的特征</h4><p>（指路博客：</p><p>逆向中常见的加密算法:<a href="https://www.cnblogs.com/a1rhthm/p/18102941">https://www.cnblogs.com/a1rhthm/p/18102941</a></p><h4 id="6）解密脚本如下："><a href="#6）解密脚本如下：" class="headerlink" title="6）解密脚本如下："></a>6）解密脚本如下：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">RC4初始化函数</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">rc4_init</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* s, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* key, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> Len_k)</span><br>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br><span class="hljs-type">char</span> k[<span class="hljs-number">256</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> tmp = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++) &#123;<br>s[i] = i;<br>k[i] = key[i % Len_k];<br>&#125;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++) &#123;<br>j = (j + s[i] + k[i]) % <span class="hljs-number">256</span>;<br>tmp = s[i];<br>s[i] = s[j];<br>s[j] = tmp;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">RC4加解密函数</span><br><span class="hljs-comment">unsigned char* Data     加解密的数据</span><br><span class="hljs-comment">unsigned long Len_D     加解密数据的长度</span><br><span class="hljs-comment">unsigned char* key      密钥</span><br><span class="hljs-comment">unsigned long Len_k     密钥长度</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">rc4_crypt</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* Data, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> Len_D, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* key, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> Len_k)</span> <span class="hljs-comment">//加解密</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> s[<span class="hljs-number">256</span>];<br>rc4_init(s, key, Len_k);<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>, t = <span class="hljs-number">0</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> k = <span class="hljs-number">0</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> tmp;<br><span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; Len_D; k++) &#123;<br>i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>;<br>j = (j + s[i]) % <span class="hljs-number">256</span>;<br>Data[k] -= i;  <span class="hljs-comment">//这里有魔改</span><br>tmp = s[i];<br>s[i] = s[j];<br>s[j] = tmp;<br>t = (s[i] + s[j]) % <span class="hljs-number">256</span>;<br>Data[k] = Data[k] ^ s[t];<br>&#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">//字符串密钥</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> key[] = <span class="hljs-string">&quot;This_1s_f1lLllag&quot;</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> key_len = <span class="hljs-keyword">sizeof</span>(key) - <span class="hljs-number">1</span>;<br><span class="hljs-comment">//数组密钥</span><br><span class="hljs-comment">//unsigned char key[] = &#123;&#125;;</span><br><span class="hljs-comment">//unsigned long key_len = sizeof(key);</span><br><br><span class="hljs-comment">//加解密数据</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> data[] = &#123; <span class="hljs-number">0x56</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x64</span>,<br><span class="hljs-number">0x10</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x5E</span> &#125;;<br><span class="hljs-comment">//加解密</span><br>rc4_crypt(data, <span class="hljs-keyword">sizeof</span>(data), key, key_len);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">sizeof</span>(data); i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, data[i]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><br><span class="hljs-comment">//（c语言源码解释：https://www.cnblogs.com/Moomin/p/15023601.html）</span><br><span class="hljs-comment">//（解密脚本：https://blog.csdn.net/weixin_45582916/article/details/121429688</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OllyDbg解决SMC</title>
    <link href="/2024/03/25/OllyDbg%E8%A7%A3%E5%86%B3SMC/"/>
    <url>/2024/03/25/OllyDbg%E8%A7%A3%E5%86%B3SMC/</url>
    
    <content type="html"><![CDATA[<h3 id="OllyDbg解决SMC"><a href="#OllyDbg解决SMC" class="headerlink" title="OllyDbg解决SMC"></a>OllyDbg解决SMC</h3><h4 id="以scu×401ctf2021-re2-pixpix为例"><a href="#以scu×401ctf2021-re2-pixpix为例" class="headerlink" title="以scu×401ctf2021-re2-pixpix为例"></a>以scu×401ctf2021-re2-pixpix为例</h4><ol><li>先查壳，无壳，进入IDA进行分析</li></ol><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240325155547023-333792123.png"></p><ol start="2"><li>进入main函数，并没有特殊的字符串进行提示，exe文件也没有提示需要进行输入。</li></ol><p>继续分析，GetPixel函数提取了对应坐标的像素值，然后在if-dowhile循环中进行了异或操作，跟进字节查看，大概猜测是对某个函数进行了smc操作</p><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240325155558291-1164084660-20240923143859812.png"></p><ol start="3"><li><p>使用od进行分析可以更清楚查看数据的变化（二编：博主进行了两次OD的运行，题目存在段首地址偏移，所以0xA83384认准0x3384即可</p><p> a.进入od界面，使用中文搜索引擎定位到函数入口</p></li></ol><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240325155612748-919285199.png"></p><pre><code class="hljs">b.F9启动调试，这里有个关键地址0xA83384-A83386，存放了在ida分析中的三个字节&#123;0x34, 0x30, 0x31&#125;c.但是汇编指令 mov ds[0xA83385],c1将地址存放的值修改为0了</code></pre><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240325155623405-1532852089.png"></p><pre><code class="hljs">d.先动态调试找到if判断（如果对汇编不熟悉的话。。</code></pre><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240325155632301-1576245004.png"></p><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240325155641663-581350194.png"></p><p>定位到关键操作异或，汇编指令mov a1,ds[ecx+0xA83384]给a1进行赋值，并且可以猜测0xA81050存放的就是待异或的flag</p><p>但是0xA83384-0xA83386的值都被修改过</p><pre><code class="hljs">e.重新启动程序进行调试，在地址内的值被修改之后再把值修改回去，这里三次地址都需要修改</code></pre><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240325155654048-666841976.png"></p><pre><code class="hljs">f.然后直接在循环之后F2下断点，就可以看到smc被解码了，flag被打印出来</code></pre><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240325155704146-1149815001.png"></p><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240325155718760-380790269.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VM逆向</title>
    <link href="/2024/03/24/VM%E9%80%86%E5%90%91/"/>
    <url>/2024/03/24/VM%E9%80%86%E5%90%91/</url>
    
    <content type="html"><![CDATA[<h1 id="VM逆向"><a href="#VM逆向" class="headerlink" title="VM逆向"></a>VM逆向</h1><h2 id="一、VM是什么？"><a href="#一、VM是什么？" class="headerlink" title="一、VM是什么？"></a>一、VM是什么？</h2><h3 id="1-模拟一个cpu去执行指令的一个过程。"><a href="#1-模拟一个cpu去执行指令的一个过程。" class="headerlink" title="1.模拟一个cpu去执行指令的一个过程。"></a>1.模拟一个cpu去执行指令的一个过程。</h3><h3 id="2-基于虚拟机的代码保护技术，将可执行代码转换为字节码指令系统的代码。即将程序的代码转换为自定义的操作码（opcode）"><a href="#2-基于虚拟机的代码保护技术，将可执行代码转换为字节码指令系统的代码。即将程序的代码转换为自定义的操作码（opcode）" class="headerlink" title="2.基于虚拟机的代码保护技术，将可执行代码转换为字节码指令系统的代码。即将程序的代码转换为自定义的操作码（opcode）"></a>2.基于虚拟机的代码保护技术，将可执行代码转换为字节码指令系统的代码。即将程序的代码转换为自定义的操作码（opcode）</h3><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240324140423461-282774348-20240923144020358.jpg"></p><h3 id="3-解决vm逆向有很多方法，但大致思路都是翻译确定每条opcode进行的操作，或是通过硬件断点-idapython脚本-或是dump下opcode然后使用自己熟悉的语言翻译每条操作-或是暴力破解每条指令操作。"><a href="#3-解决vm逆向有很多方法，但大致思路都是翻译确定每条opcode进行的操作，或是通过硬件断点-idapython脚本-或是dump下opcode然后使用自己熟悉的语言翻译每条操作-或是暴力破解每条指令操作。" class="headerlink" title="3.解决vm逆向有很多方法，但大致思路都是翻译确定每条opcode进行的操作，或是通过硬件断点+idapython脚本&#x2F;或是dump下opcode然后使用自己熟悉的语言翻译每条操作&#x2F;或是暴力破解每条指令操作。"></a>3.解决vm逆向有很多方法，但大致思路都是翻译确定每条opcode进行的操作，或是通过硬件断点+idapython脚本&#x2F;或是dump下opcode然后使用自己熟悉的语言翻译每条操作&#x2F;或是暴力破解每条指令操作。</h3><h2 id="二、虚拟机的构造："><a href="#二、虚拟机的构造：" class="headerlink" title="二、虚拟机的构造："></a>二、虚拟机的构造：</h2><h3 id="1-定义基本寄存器：所以通过引入结构体，同样在反汇编代码中定义寄存器"><a href="#1-定义基本寄存器：所以通过引入结构体，同样在反汇编代码中定义寄存器" class="headerlink" title="1.定义基本寄存器：所以通过引入结构体，同样在反汇编代码中定义寄存器"></a>1.定义基本寄存器：所以通过引入结构体，同样在反汇编代码中定义寄存器</h3><p>_CPU结构体：定义寄存器：__eax, _ebx, _ecx, _edx, _eip，其中eip指向opcode的地址</p><p>（这个大佬的视频讲的很好，推荐：【Bugku&#x2F;CTF&#x2F;Re&#x2F;WP】使用IDA结构体解决VM虚拟机保护】<a href="https://www.bilibili.com/video/BV1gv4y1u7t1?vd_source=69ffcd703762aa7a204e6cc6f57ba69d%EF%BC%89">https://www.bilibili.com/video/BV1gv4y1u7t1?vd_source=69ffcd703762aa7a204e6cc6f57ba69d）</a></p><p>（再编：本博客尝试用定义结构体的方式便捷查看每个存储器eax&#x2F;ebx的数据变化，所以浅浅补充一下如何定义结构体：eax、ebx等存储器用来存放特定的数据，所以在汇编中会有固定的大小（对应db&#x2F;dd&#x2F;dq等）</p><h3 id="2-opcode：操作码，一般是一大段的字节，在程序中通过选择结构运行"><a href="#2-opcode：操作码，一般是一大段的字节，在程序中通过选择结构运行" class="headerlink" title="2.opcode：操作码，一般是一大段的字节，在程序中通过选择结构运行"></a>2.opcode：操作码，一般是一大段的字节，在程序中通过选择结构运行</h3><h2 id="三、以ctf题为例"><a href="#三、以ctf题为例" class="headerlink" title="三、以ctf题为例"></a>三、以ctf题为例</h2><h3 id="1-第七届山东省大学生网络安全技能大赛-re-babyLoginPlus"><a href="#1-第七届山东省大学生网络安全技能大赛-re-babyLoginPlus" class="headerlink" title="1.第七届山东省大学生网络安全技能大赛-re-babyLoginPlus"></a>1.第七届山东省大学生网络安全技能大赛-re-babyLoginPlus</h3><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240324140436662-534361749.png"></p><h4 id="1）跟进第二个函数，为40B0B0加载了一段操作"><a href="#1）跟进第二个函数，为40B0B0加载了一段操作" class="headerlink" title="1）跟进第二个函数，为40B0B0加载了一段操作"></a>1）跟进第二个函数，为40B0B0加载了一段操作</h4><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240324140445112-1319743166.png"></p><h4 id="2）跟进第三个函数，有一个关键判断if，其中对上面的40B0B0进行了引用，所以可以猜测unk-40853C就是opcode"><a href="#2）跟进第三个函数，有一个关键判断if，其中对上面的40B0B0进行了引用，所以可以猜测unk-40853C就是opcode" class="headerlink" title="2）跟进第三个函数，有一个关键判断if，其中对上面的40B0B0进行了引用，所以可以猜测unk_40853C就是opcode"></a>2）跟进第三个函数，有一个关键判断if，其中对上面的40B0B0进行了引用，所以可以猜测unk_40853C就是opcode</h4><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240324140453481-1574116441.png"></p><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240324140504233-1467965910.png"></p><h4 id="3）定义关键结构体"><a href="#3）定义关键结构体" class="headerlink" title="3）定义关键结构体"></a>3）定义关键结构体</h4><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240324140512946-1127604560.png"></p><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240324140521034-1862981518.png"></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">opcode特征：（动调分析每一条指令的内容）<br><br><span class="hljs-number">0xD0</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00d</span>, <br><span class="hljs-number">0xD0</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, _<span class="hljs-built_in">ebx</span>=<span class="hljs-number">0x25</span><br><span class="hljs-number">0xD4</span>, input=fa1rhthm0fa1rhthm0fa1rhthm0fa1rhthm00<br><span class="hljs-number">0xD0</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, _<span class="hljs-built_in">eax</span>=<span class="hljs-number">0</span>,_<span class="hljs-built_in">eip</span>+<span class="hljs-number">6</span>=D0<br><span class="hljs-number">0xD0</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <br><span class="hljs-number">0xD0</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, 提取<span class="hljs-built_in">eax</span>=input[<span class="hljs-number">0</span>]<br><span class="hljs-number">0xD0</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-built_in">ebx</span>=<span class="hljs-number">9</span><br><span class="hljs-number">0xD8</span>, <span class="hljs-built_in">eax</span>-=<span class="hljs-built_in">ebx</span><br><span class="hljs-number">0xD0</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-built_in">ebx</span>=<span class="hljs-number">0x26</span><br><span class="hljs-number">0xD1</span>, ((input-<span class="hljs-number">9</span>)^<span class="hljs-number">0x26</span>)^key[]+<span class="hljs-number">6</span><span class="hljs-built_in">eax</span>^=<span class="hljs-built_in">ebx</span><br><span class="hljs-number">0xD0</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x00</span>,  <span class="hljs-number">0x00</span>, <span class="hljs-built_in">ebx</span>=<span class="hljs-number">0x200</span><br><span class="hljs-number">0xD0</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<span class="hljs-built_in">ebx</span>=<span class="hljs-number">0</span><br><span class="hljs-number">0xD0</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-built_in">ecx</span>=<span class="hljs-number">0x12c</span><br><span class="hljs-number">0xD7</span>, <span class="hljs-number">0x02</span>,<span class="hljs-built_in">ebx</span>=<span class="hljs-built_in">ebx</span>+<span class="hljs-built_in">ecx</span><br><span class="hljs-number">0xD0</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-built_in">ebx</span>=<span class="hljs-number">0x57</span><br><span class="hljs-number">0xD1</span>, <span class="hljs-built_in">eax</span>^=<span class="hljs-built_in">ebx</span><br><span class="hljs-number">0xD0</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-built_in">ebx</span>=<span class="hljs-number">0x6</span><br><span class="hljs-number">0xD7</span>, <span class="hljs-number">0x01</span>, <span class="hljs-built_in">eax</span>+=<span class="hljs-built_in">ebx</span><br><span class="hljs-number">0xD0</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-built_in">ebx</span>=<span class="hljs-number">0x200</span><br><span class="hljs-number">0xD0</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-built_in">ebx</span>=<span class="hljs-number">0</span><br><span class="hljs-number">0xD0</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-built_in">ecx</span>=<span class="hljs-number">0x190</span><br><span class="hljs-number">0xD7</span>, <span class="hljs-number">0x02</span>, <span class="hljs-built_in">ebx</span>=<span class="hljs-number">0</span>+<span class="hljs-number">0x190</span><br><span class="hljs-number">0xD0</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-built_in">ebx</span>=<span class="hljs-number">0x32</span><br><br>...<br></code></pre></td></tr></table></figure><h3 id="n1ctf"><a href="#n1ctf" class="headerlink" title="n1ctf"></a>n1ctf</h3><p>这道题貌似没有特别的cpu和opcode特征，函数也是动态加载出来的</p><p>（还没解决</p><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240324140539074-1858880502.png"></p><h3 id="gwctf2019-babyvm（同样的流程，不过多赘述"><a href="#gwctf2019-babyvm（同样的流程，不过多赘述" class="headerlink" title="gwctf2019-babyvm（同样的流程，不过多赘述"></a>gwctf2019-babyvm（同样的流程，不过多赘述</h3><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240324140547883-81697198.png"></p><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240324140555327-155634725.png"></p><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240324140602552-1897720881.png"></p><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240324140609313-1177267116.png"></p><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240324140618229-1385650943.png"></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">airhthmairhthmairhthm<br><span class="hljs-number">0xF5</span>,  判断长度是否为<span class="hljs-number">21</span><br><span class="hljs-number">0xF1</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-built_in">eax</span>=input[<span class="hljs-built_in">eip</span>+<span class="hljs-number">2</span>]=input[<span class="hljs-number">0</span>]<br><span class="hljs-number">0xF2</span>, <span class="hljs-built_in">ebx</span>=<span class="hljs-number">0x12</span>,<span class="hljs-built_in">eax</span>^=<span class="hljs-built_in">ebx</span><br><span class="hljs-number">0xF1</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, input[<span class="hljs-built_in">eip</span>+<span class="hljs-number">2</span>]=input[<span class="hljs-number">0x20</span>]=<span class="hljs-built_in">eax</span><br><span class="hljs-number">0xF1</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-built_in">eax</span>=input[<span class="hljs-built_in">eip</span>+<span class="hljs-number">2</span>]=input[<span class="hljs-number">1</span>]<br><span class="hljs-number">0xF2</span>, <span class="hljs-built_in">eax</span>^=<span class="hljs-built_in">ebx</span>,<span class="hljs-built_in">ebx</span>=<span class="hljs-number">0x12</span><br><span class="hljs-number">0xF1</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, input[<span class="hljs-built_in">eip</span>+<span class="hljs-number">2</span>]=input[<span class="hljs-number">0x21</span>]=<span class="hljs-built_in">eax</span><br><span class="hljs-number">0xF1</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, 这一部分只是将输入简单异或<span class="hljs-number">0x12</span>然后存储起来<br><span class="hljs-number">0xF2</span>, <br><span class="hljs-number">0xF1</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <br><span class="hljs-number">0xF1</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <br>....<br><br>截止这里，前<span class="hljs-number">13</span>（<span class="hljs-number">0x33</span>-<span class="hljs-number">0x20</span>）位输入被^<span class="hljs-number">0x12</span><br></code></pre></td></tr></table></figure><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-number">0xF4</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br><span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br><span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <br><span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <br><span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <br>到<span class="hljs-number">0xF4</span>直接退出了？<br></code></pre></td></tr></table></figure><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">以下才是真正的opcode（但是不知道为什么动调是上面那段，大佬的wp说是主动防御？<br><span class="hljs-number">0xF5</span>, <br><span class="hljs-number">0xF1</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <br><span class="hljs-number">0xF1</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <br><span class="hljs-number">0xF2</span>, <br><span class="hljs-number">0xF1</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <br><span class="hljs-number">0xF1</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <br><span class="hljs-number">0xF1</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <br><span class="hljs-number">0xF2</span>, <br><span class="hljs-number">0xF1</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <br><span class="hljs-number">0xF1</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <br><span class="hljs-number">0xF1</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br><span class="hljs-number">0xF2</span>, <br><span class="hljs-number">0xF1</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <br><span class="hljs-number">0xF1</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <br><span class="hljs-number">0xF1</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <br><span class="hljs-number">0xF2</span>, <br><span class="hljs-number">0xF1</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <br><span class="hljs-number">0xF1</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <br><span class="hljs-number">0xF1</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <br>......<br><br></code></pre></td></tr></table></figure><p>太复杂了选择写个脚本查看每条op指令做了什么</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> opcode[] = &#123;... &#125;;<br>    <span class="hljs-type">int</span> len = <span class="hljs-keyword">sizeof</span>(opcode) / <span class="hljs-keyword">sizeof</span>(opcode[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)<br>    &#123;<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> tab = opcode[i];<br>        <span class="hljs-keyword">if</span> (tab == <span class="hljs-number">0xF5</span>)<br>        &#123;<br>            i += <span class="hljs-number">5</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tab == <span class="hljs-number">0xF1</span>)<br>        &#123;<br>            <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> next = opcode[i + <span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">switch</span> (next) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0xE1</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;cpu_eax = input[%d]\n&quot;</span>, opcode[i + <span class="hljs-number">2</span>]);<br>                i += <span class="hljs-number">5</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0xE2</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;cpu_ebx = input[%d]\n&quot;</span>, opcode[i + <span class="hljs-number">2</span>]);<br>                i += <span class="hljs-number">5</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0xE3</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;cpu_ecx = input[%d]\n&quot;</span>, opcode[i + <span class="hljs-number">2</span>]);<br>                i += <span class="hljs-number">5</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0xE4</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;input[%d] = cpu_eax\n&quot;</span>, opcode[i + <span class="hljs-number">2</span>]);<br>                i += <span class="hljs-number">5</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0xE5</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;cpu_edx = input[%d]\n&quot;</span>, opcode[i + <span class="hljs-number">2</span>]);<br>                i += <span class="hljs-number">5</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0xE7</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;input[%d] = cpu_ebx\n&quot;</span>, opcode[i + <span class="hljs-number">2</span>]);<br>                i += <span class="hljs-number">5</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Unknown opcode: %X\n&quot;</span>, next);<br>                i++; <span class="hljs-comment">// move to next opcode</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tab == <span class="hljs-number">0xF2</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;cpu_eax^=cpu_ebx&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tab == <span class="hljs-number">0xF4</span>)<br>        &#123;<br>            i += <span class="hljs-number">5</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tab == <span class="hljs-number">0xF7</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;cpu_eax *= cpu_edx\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tab == <span class="hljs-number">0xF8</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;exchange_eax_ebx\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tab == <span class="hljs-number">0xF6</span>) <br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;cpu_eax = cpu_ecx + 2 * cpu_ebx + 3 * cpu_eax\n&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br>                <br>            <br>                    <br>                    <br>        <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF-re中常见的加密算法</title>
    <link href="/2024/03/18/%E9%80%86%E5%90%91%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    <url>/2024/03/18/%E9%80%86%E5%90%91%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="逆向中常见的加密算法"><a href="#逆向中常见的加密算法" class="headerlink" title="逆向中常见的加密算法"></a>逆向中常见的加密算法</h1><h3 id="1-Base64"><a href="#1-Base64" class="headerlink" title="1.Base64"></a>1.Base64</h3><h4 id="1-原理与特征："><a href="#1-原理与特征：" class="headerlink" title="1) 原理与特征："></a>1) 原理与特征：</h4><pre><code class="hljs">a.原理：将3个byte（即3×8=24bit）切割为4×6，然后根据6bit表示的数字在base64表（64byte的表）寻找对应的值；如果待加密字符串长度不为3的整数，则在末尾处补0对齐，其中0对应的字符为&#39;=&#39;。b.特征：在反汇编代码中会出现0x3F，‘=’ 的特殊标识。（某些题目可能会直接在base64加密函数修改而不仅仅是变表-安洵杯2019-crackme</code></pre><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240329004659037-1594552145.png"></p><h4 id="2-解密脚本"><a href="#2-解密脚本" class="headerlink" title="2) 解密脚本"></a>2) 解密脚本</h4><pre><code class="hljs">a.不换表</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br>encode_str=<span class="hljs-string">&#x27;&#x27;</span><br>decode_str=base64.b64decode(str0).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-built_in">print</span>(decode_str)<br></code></pre></td></tr></table></figure><pre><code class="hljs">b.换表</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br>encode_string = <span class="hljs-string">&quot;&quot;</span><br>string1 = <span class="hljs-string">&quot;&quot;</span><span class="hljs-comment">#base64变表</span><br>string2 = <span class="hljs-string">&quot;ABCDEFGIJKLMNOPQRSTUVWXYZabcdefgijklmnopqrstuvwxyz0123456789+/&quot;</span><br>decode_str=base64.b64decode(encode_string.translate(<span class="hljs-built_in">str</span>.maketrans(string1,string2)))<br><span class="hljs-built_in">print</span>(decode_str)<br></code></pre></td></tr></table></figure><h3 id="2-Tea-XTea"><a href="#2-Tea-XTea" class="headerlink" title="2.Tea-XTea"></a>2.Tea-XTea</h3><h4 id="1-原理与特征"><a href="#1-原理与特征" class="headerlink" title="1) 原理与特征"></a>1) 原理与特征</h4><pre><code class="hljs">a.原理：tea算法家族的原理比较简单（目前博主仅遇到的tea/xtea），魔改tea的类型也比较多，可能是在循环移位进行改动，也可能是修改了delta的值b.特征：（出自 [HNCTF 2022 WEEK2]TTTTTTTTTea）</code></pre><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240329004718799-835000135-20240923143501725.png"></p><pre><code class="hljs">a) 存在delta,(上图delta=0x61C88647)b) input[i]与input[i+n]进行移位/异或/加减操作</code></pre><h4 id="2-解密脚本（题目出自-HNCTF-2022-WEEK2-TTTTTTTTTea"><a href="#2-解密脚本（题目出自-HNCTF-2022-WEEK2-TTTTTTTTTea" class="headerlink" title="2) 解密脚本（题目出自 [HNCTF 2022 WEEK2]TTTTTTTTTea"></a>2) 解密脚本（题目出自 [HNCTF 2022 WEEK2]TTTTTTTTTea</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> enc[] = &#123;<span class="hljs-number">0xC11EE75A</span>, <span class="hljs-number">0xA4AD0973</span>, <span class="hljs-number">0xF61C9018</span>, <span class="hljs-number">0x32E37BCD</span>, <span class="hljs-number">0x2DCC1F26</span>, <span class="hljs-number">0x344380CC</span>&#125;;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> key[] = &#123; <span class="hljs-number">0x10203</span>,<span class="hljs-number">0x4050607</span>,<span class="hljs-number">0x8090A0B</span>,<span class="hljs-number">0x0C0D0E0F</span> &#125;;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> delta = <span class="hljs-number">0x61C88647</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">6</span>;j+=<span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v4 = <span class="hljs-number">0</span> - (<span class="hljs-number">32</span> * <span class="hljs-number">0x61C88647</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; ++i)<br>        &#123;<br>            enc[j + <span class="hljs-number">1</span>] -= (((enc[j] &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">16</span> * enc[j])) + enc[j]) ^ (key[((v4 &gt;&gt; <span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>)] + v4);<br>            v4 += <span class="hljs-number">0x61C88647</span>;<br>            enc[j] -= (((enc[j + <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">16</span> * enc[j + <span class="hljs-number">1</span>])) + enc[j + <span class="hljs-number">1</span>]) ^ (key[(v4 &amp; <span class="hljs-number">3</span>)] + v4);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lx,%lx,&quot;</span>,enc[j],enc[j+<span class="hljs-number">1</span>]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-type">char</span>* ptr = enc;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> p = <span class="hljs-number">0</span>; p &lt; <span class="hljs-number">24</span>; p++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, *(ptr++));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-RC4"><a href="#3-RC4" class="headerlink" title="3.RC4"></a>3.RC4</h3><h4 id="1-原理与特征-1"><a href="#1-原理与特征-1" class="headerlink" title="1) 原理与特征"></a>1) 原理与特征</h4><pre><code class="hljs">a.原理：a) 先初始化一个长度为256的s盒，同时根据密钥key初始化一个长度为256的T盒；b) 根据T盒打乱S盒（重要的步骤是交换s盒元素的位置）；c) 将待加密的数据进行与s盒元素进行异或。b.特征：a) 一般出现三个for循环，前两个循环进行256次，第三个循环32次；   b) 会出现两个长度为256的数组，其中一个数组的初始值一般为0-255。</code></pre><h4 id="2-解密脚本-1"><a href="#2-解密脚本-1" class="headerlink" title="2) 解密脚本"></a>2) 解密脚本</h4><p>rc4是对称算法（异或），所以加密脚本也是解密脚本<br>（题目：vctf2024-vm）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">RC4初始化函数</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">rc4_init</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* s, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* key, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> Len_k)</span><br>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br><span class="hljs-type">char</span> k[<span class="hljs-number">256</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> tmp = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++) &#123;<br>s[i] = i;<br>k[i] = key[i % Len_k];<br>&#125;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++) &#123;<br>j = (j + s[i] + k[i]) % <span class="hljs-number">256</span>;<br>tmp = s[i];<br>s[i] = s[j];<br>s[j] = tmp;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">RC4加解密函数</span><br><span class="hljs-comment">unsigned char* Data     加解密的数据</span><br><span class="hljs-comment">unsigned long Len_D     加解密数据的长度</span><br><span class="hljs-comment">unsigned char* key      密钥</span><br><span class="hljs-comment">unsigned long Len_k     密钥长度</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">rc4_crypt</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* Data, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> Len_D, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* key, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> Len_k)</span> <span class="hljs-comment">//加解密</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> s[<span class="hljs-number">256</span>];<br>rc4_init(s, key, Len_k);<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>, t = <span class="hljs-number">0</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> k = <span class="hljs-number">0</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> tmp;<br><span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; Len_D; k++) &#123;<br>i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>;<br>j = (j + s[i]) % <span class="hljs-number">256</span>;<br>Data[k] -= i;  <span class="hljs-comment">//这里有魔改</span><br>tmp = s[i];<br>s[i] = s[j];<br>s[j] = tmp;<br>t = (s[i] + s[j]) % <span class="hljs-number">256</span>;<br>Data[k] = Data[k] ^ s[t];<br>&#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">//字符串密钥</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> key[] = <span class="hljs-string">&quot;This_1s_f1lLllag&quot;</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> key_len = <span class="hljs-keyword">sizeof</span>(key) - <span class="hljs-number">1</span>;<br><span class="hljs-comment">//数组密钥</span><br><span class="hljs-comment">//unsigned char key[] = &#123;&#125;;</span><br><span class="hljs-comment">//unsigned long key_len = sizeof(key);</span><br><br><span class="hljs-comment">//加解密数据</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> data[] = &#123; <span class="hljs-number">0x56</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x64</span>,<br><span class="hljs-number">0x10</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x5E</span> &#125;;<br><span class="hljs-comment">//加解密</span><br>rc4_crypt(data, <span class="hljs-keyword">sizeof</span>(data), key, key_len);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">sizeof</span>(data); i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, data[i]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//zstuctf&#123;xXx_team_Is_GooD</span><br><br><br><br><span class="hljs-comment">//（c语言源码解释：https://www.cnblogs.com/Moomin/p/15023601.html）</span><br><span class="hljs-comment">//（解密脚本：https://blog.csdn.net/weixin_45582916/article/details/121429688</span><br></code></pre></td></tr></table></figure><h3 id="4-AES"><a href="#4-AES" class="headerlink" title="4.AES"></a>4.AES</h3><h4 id="1-原理与特征-2"><a href="#1-原理与特征-2" class="headerlink" title="1) 原理与特征"></a>1) 原理与特征</h4><p>（AES的数学运算太复杂了，可以在b站或者其他博客研究原理，本博客侧重解密）</p><p>【5分钟搞定AES算法】<a href="https://www.bilibili.com/video/BV1yq4y1X7Kt?vd_source=69ffcd703762aa7a204e6cc6f57ba69d">https://www.bilibili.com/video/BV1yq4y1X7Kt?vd_source=69ffcd703762aa7a204e6cc6f57ba69d</a></p><pre><code class="hljs">a.加密过程简述：密钥扩展--字节替换--行移位--列混合--轮密钥加。a) 先将密钥转化为4*4的矩阵进行扩展（这里的扩展会进行移位/异或的一系列操作）b) 字节替换：AES有一个16×16=256长度的S盒用于替换字节，可以理解为二维数组。将原有字节，例如data=0xab，则替换为s盒中第a行第b列对应的值。（S盒的构造非常麻烦，所以一般是固定的，但也存在魔改AES的情况c) 行移位：AES的操作基于4*4的矩阵进行，第i行循环左移i字节d) 列混合：矩阵相乘e) 轮密钥加：将数据与密钥进行异或b.特征：a) AES会进行9次循环（准确来说是10次？），且一般在反汇编代码中，每个操作以函数的形式存在</code></pre><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240329004756572-847154264.png"></p><pre><code class="hljs">b) 密钥扩展存在轮常量：</code></pre><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1000000h, 2000000h, 4000000h, 8000000h, 10000000h, 20000000h, 40000000h, 80000000h, 1B000000h, 36000000h<br></code></pre></td></tr></table></figure><pre><code class="hljs">c) 未魔改的s盒与逆s盒</code></pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">uint8_t</span> sbox[<span class="hljs-number">256</span>] = &#123;<br><span class="hljs-number">0x63</span>, <span class="hljs-number">0x7c</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x7b</span>, <span class="hljs-number">0xf2</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x6f</span>, <span class="hljs-number">0xc5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x2b</span>, <span class="hljs-number">0xfe</span>, <span class="hljs-number">0xd7</span>, <span class="hljs-number">0xab</span>, <span class="hljs-number">0x76</span>,<br><span class="hljs-number">0xca</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xc9</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0xfa</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xf0</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0xd4</span>, <span class="hljs-number">0xa2</span>, <span class="hljs-number">0xaf</span>, <span class="hljs-number">0x9c</span>, <span class="hljs-number">0xa4</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xc0</span>,<br><span class="hljs-number">0xb7</span>, <span class="hljs-number">0xfd</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0xcc</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0xe5</span>, <span class="hljs-number">0xf1</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xd8</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x15</span>,<br><span class="hljs-number">0x04</span>, <span class="hljs-number">0xc7</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xc3</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x9a</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xe2</span>, <span class="hljs-number">0xeb</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xb2</span>, <span class="hljs-number">0x75</span>,<br><span class="hljs-number">0x09</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x1a</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x6e</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0xa0</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x3b</span>, <span class="hljs-number">0xd6</span>, <span class="hljs-number">0xb3</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xe3</span>, <span class="hljs-number">0x2f</span>, <span class="hljs-number">0x84</span>,<br><span class="hljs-number">0x53</span>, <span class="hljs-number">0xd1</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xed</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xfc</span>, <span class="hljs-number">0xb1</span>, <span class="hljs-number">0x5b</span>, <span class="hljs-number">0x6a</span>, <span class="hljs-number">0xcb</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x4a</span>, <span class="hljs-number">0x4c</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xcf</span>,<br><span class="hljs-number">0xd0</span>, <span class="hljs-number">0xef</span>, <span class="hljs-number">0xaa</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x4d</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x7f</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x3c</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0xa8</span>,<br><span class="hljs-number">0x51</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x8f</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xf5</span>, <span class="hljs-number">0xbc</span>, <span class="hljs-number">0xb6</span>, <span class="hljs-number">0xda</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0xf3</span>, <span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xcd</span>, <span class="hljs-number">0x0c</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xec</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xc4</span>, <span class="hljs-number">0xa7</span>, <span class="hljs-number">0x7e</span>, <span class="hljs-number">0x3d</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x73</span>,<br><span class="hljs-number">0x60</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x4f</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x2a</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xee</span>, <span class="hljs-number">0xb8</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xde</span>, <span class="hljs-number">0x5e</span>, <span class="hljs-number">0x0b</span>, <span class="hljs-number">0xdb</span>,<br><span class="hljs-number">0xe0</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x3a</span>, <span class="hljs-number">0x0a</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5c</span>, <span class="hljs-number">0xc2</span>, <span class="hljs-number">0xd3</span>, <span class="hljs-number">0xac</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xe4</span>, <span class="hljs-number">0x79</span>,<br><span class="hljs-number">0xe7</span>, <span class="hljs-number">0xc8</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x6d</span>, <span class="hljs-number">0x8d</span>, <span class="hljs-number">0xd5</span>, <span class="hljs-number">0x4e</span>, <span class="hljs-number">0xa9</span>, <span class="hljs-number">0x6c</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xf4</span>, <span class="hljs-number">0xea</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0x08</span>,<br><span class="hljs-number">0xba</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x2e</span>, <span class="hljs-number">0x1c</span>, <span class="hljs-number">0xa6</span>, <span class="hljs-number">0xb4</span>, <span class="hljs-number">0xc6</span>, <span class="hljs-number">0xe8</span>, <span class="hljs-number">0xdd</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x1f</span>, <span class="hljs-number">0x4b</span>, <span class="hljs-number">0xbd</span>, <span class="hljs-number">0x8b</span>, <span class="hljs-number">0x8a</span>,<br><span class="hljs-number">0x70</span>, <span class="hljs-number">0x3e</span>, <span class="hljs-number">0xb5</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xb9</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0xc1</span>, <span class="hljs-number">0x1d</span>, <span class="hljs-number">0x9e</span>,<br><span class="hljs-number">0xe1</span>, <span class="hljs-number">0xf8</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x8e</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x9b</span>, <span class="hljs-number">0x1e</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xe9</span>, <span class="hljs-number">0xce</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xdf</span>,<br><span class="hljs-number">0x8c</span>, <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x0d</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0xe6</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x2d</span>, <span class="hljs-number">0x0f</span>, <span class="hljs-number">0xb0</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0xbb</span>, <span class="hljs-number">0x16</span><br>&#125;;<br><span class="hljs-type">uint8_t</span> inVsbox[<span class="hljs-number">256</span>] = &#123;<br><span class="hljs-number">0x52</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x6a</span>, <span class="hljs-number">0xd5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9e</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0xf3</span>, <span class="hljs-number">0xd7</span>, <span class="hljs-number">0xfb</span>,<br><span class="hljs-number">0x7c</span>, <span class="hljs-number">0xe3</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x9b</span>, <span class="hljs-number">0x2f</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x8e</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0xc4</span>, <span class="hljs-number">0xde</span>, <span class="hljs-number">0xe9</span>, <span class="hljs-number">0xcb</span>,<br><span class="hljs-number">0x54</span>, <span class="hljs-number">0x7b</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0xa6</span>, <span class="hljs-number">0xc2</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x3d</span>, <span class="hljs-number">0xee</span>, <span class="hljs-number">0x4c</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x0b</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xfa</span>, <span class="hljs-number">0xc3</span>, <span class="hljs-number">0x4e</span>,<br><span class="hljs-number">0x08</span>, <span class="hljs-number">0x2e</span>, <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0xb2</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x5b</span>, <span class="hljs-number">0xa2</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x6d</span>, <span class="hljs-number">0x8b</span>, <span class="hljs-number">0xd1</span>, <span class="hljs-number">0x25</span>,<br><span class="hljs-number">0x72</span>, <span class="hljs-number">0xf8</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0xd4</span>, <span class="hljs-number">0xa4</span>, <span class="hljs-number">0x5c</span>, <span class="hljs-number">0xcc</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0xb6</span>, <span class="hljs-number">0x92</span>,<br><span class="hljs-number">0x6c</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0xfd</span>, <span class="hljs-number">0xed</span>, <span class="hljs-number">0xb9</span>, <span class="hljs-number">0xda</span>, <span class="hljs-number">0x5e</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xa7</span>, <span class="hljs-number">0x8d</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0x84</span>,<br><span class="hljs-number">0x90</span>, <span class="hljs-number">0xd8</span>, <span class="hljs-number">0xab</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x8c</span>, <span class="hljs-number">0xbc</span>, <span class="hljs-number">0xd3</span>, <span class="hljs-number">0x0a</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0xe4</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0xb8</span>, <span class="hljs-number">0xb3</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x06</span>,<br><span class="hljs-number">0xd0</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x1e</span>, <span class="hljs-number">0x8f</span>, <span class="hljs-number">0xca</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0x0f</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0xc1</span>, <span class="hljs-number">0xaf</span>, <span class="hljs-number">0xbd</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x8a</span>, <span class="hljs-number">0x6b</span>,<br><span class="hljs-number">0x3a</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x4f</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0xea</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0xf2</span>, <span class="hljs-number">0xcf</span>, <span class="hljs-number">0xce</span>, <span class="hljs-number">0xf0</span>, <span class="hljs-number">0xb4</span>, <span class="hljs-number">0xe6</span>, <span class="hljs-number">0x73</span>,<br><span class="hljs-number">0x96</span>, <span class="hljs-number">0xac</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0xe7</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xe2</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xe8</span>, <span class="hljs-number">0x1c</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xdf</span>, <span class="hljs-number">0x6e</span>,<br><span class="hljs-number">0x47</span>, <span class="hljs-number">0xf1</span>, <span class="hljs-number">0x1a</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x1d</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xc5</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x6f</span>, <span class="hljs-number">0xb7</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0xaa</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x1b</span>,<br><span class="hljs-number">0xfc</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x3e</span>, <span class="hljs-number">0x4b</span>, <span class="hljs-number">0xc6</span>, <span class="hljs-number">0xd2</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x9a</span>, <span class="hljs-number">0xdb</span>, <span class="hljs-number">0xc0</span>, <span class="hljs-number">0xfe</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0xcd</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0xf4</span>,<br><span class="hljs-number">0x1f</span>, <span class="hljs-number">0xdd</span>, <span class="hljs-number">0xa8</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0xc7</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xb1</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xec</span>, <span class="hljs-number">0x5f</span>,<br><span class="hljs-number">0x60</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x7f</span>, <span class="hljs-number">0xa9</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xb5</span>, <span class="hljs-number">0x4a</span>, <span class="hljs-number">0x0d</span>, <span class="hljs-number">0x2d</span>, <span class="hljs-number">0xe5</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xc9</span>, <span class="hljs-number">0x9c</span>, <span class="hljs-number">0xef</span>,<br><span class="hljs-number">0xa0</span>, <span class="hljs-number">0xe0</span>, <span class="hljs-number">0x3b</span>, <span class="hljs-number">0x4d</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0x2a</span>, <span class="hljs-number">0xf5</span>, <span class="hljs-number">0xb0</span>, <span class="hljs-number">0xc8</span>, <span class="hljs-number">0xeb</span>, <span class="hljs-number">0xbb</span>, <span class="hljs-number">0x3c</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x61</span>,<br><span class="hljs-number">0x17</span>, <span class="hljs-number">0x2b</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x7e</span>, <span class="hljs-number">0xba</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xd6</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x0c</span>, <span class="hljs-number">0x7d</span><br>&#125;;         <br></code></pre></td></tr></table></figure><h4 id="b-解密脚本"><a href="#b-解密脚本" class="headerlink" title="b.解密脚本"></a>b.解密脚本</h4><p>a) 魔改S盒求逆S盒</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//NKCTF2024-loginsystem</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> Sbox[<span class="hljs-number">16</span>][<span class="hljs-number">16</span>] = &#123;<br>        <span class="hljs-number">0x31</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x83</span>,<br>        <span class="hljs-number">0x60</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x7B</span>,<br>        <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x67</span>,<br>        <span class="hljs-number">0x03</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x74</span>,<br>        <span class="hljs-number">0x09</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0xB0</span>,<br>        <span class="hljs-number">0x04</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x45</span>,<br>        <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x20</span>,<br>        <span class="hljs-number">0x07</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x16</span>,<br>        <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x90</span>,<br>        <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x3E</span>,<br>        <span class="hljs-number">0x40</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xD2</span>,<br>        <span class="hljs-number">0x96</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0xBF</span>,<br>        <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x8A</span>,<br>        <span class="hljs-number">0xCA</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0xBE</span>,<br>        <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x99</span>,<br>        <span class="hljs-number">0x22</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xFD</span><br>    &#125;;<br><span class="hljs-comment">//博主用的是自己比较好理解的方式写的。。其实还有更简单的脚本</span><br>    <span class="hljs-type">int</span> InvSbox[<span class="hljs-number">16</span>][<span class="hljs-number">16</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;    &quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">16</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">16</span>;j++)<br>        &#123;<br>            InvSbox[(Sbox[i][j]) &gt;&gt; <span class="hljs-number">4</span>][(Sbox[i][j]) &amp; <span class="hljs-number">0xf</span>] = (i &lt;&lt; <span class="hljs-number">4</span>) + j;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">16</span>;j++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2x  &quot;</span>, j);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">16</span>; k++) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0x%.2x  &quot;</span>, InvSbox[j][k]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着将魔改的S盒导入以下博客里的脚本就可以解密</p><p><a href="https://blog.csdn.net/weixin_45582916/article/details/121429445">https://blog.csdn.net/weixin_45582916/article/details/121429445</a></p><p>b) 未魔改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>enc=<span class="hljs-number">0xBC0AADC0147C5ECCE0B140BC9C51D52B46B2B9434DE5324BAD7FB4B39CDB4B5B</span><br>key=<span class="hljs-number">0xcb8d493521b47a4cc1ae7e62229266ce</span><br>keyy=long_to_bytes(key)<br>encc=long_to_bytes(enc)<br>decrypt_str=AES.new(keyy,mode=AES.MODE_ECB)     <br>flag=decrypt_str.decrypt(encc)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h3 id="5-SM4"><a href="#5-SM4" class="headerlink" title="5.SM4"></a>5.SM4</h3><h4 id="1-原理与特征-3"><a href="#1-原理与特征-3" class="headerlink" title="1) 原理与特征"></a>1) 原理与特征</h4><p>a. 原理：</p><pre><code class="hljs">a) SM4的输入与密钥都是128bit，进行了32轮的迭代运算与1次反序变换，每一轮进行4bit的运算。(详细原理请戳：https://www.bilibili.com/video/BV1LS4y167r3?vd_source=69ffcd703762aa7a204e6cc6f57ba69d)b) 以安洵杯2019-crackme为例</code></pre><ul><li>这里有很明显的轮密钥扩展特征（使用了findcrypt插件</li></ul><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240329004919576-638656923.png"></p><ul><li>进入SM4加密，可以看到进行32次循环，跟进sub_D91700查看，发现是轮函数（即加密</li></ul><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240329004936135-2072106169.png"></p><p><img src="https://raw.githubusercontent.com/Cel1n14/blogImg/main/img3365542-20240329004940865-689647825.png"></p><p>​b.特征：</p><pre><code class="hljs">a) 有S盒进行字节替换</code></pre><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs markdown">s<span class="hljs-emphasis">_box[256]=&#123;</span><br><span class="hljs-emphasis">    0xD6, 0x90, 0xE9, 0xFE, 0xCC, 0xE1, 0x3D, 0xB7, 0x16, 0xB6, 0x14, 0xC2, 0x28, 0xFB, 0x2C, 0x05,</span><br><span class="hljs-emphasis">    0x2B, 0x67, 0x9A, 0x76, 0x2A, 0xBE, 0x04, 0xC3, 0xAA, 0x44, 0x13, 0x26, 0x49, 0x86, 0x06, 0x99,</span><br><span class="hljs-emphasis">    0x9C, 0x42, 0x50, 0xF4, 0x91, 0xEF, 0x98, 0x7A, 0x33, 0x54, 0x0B, 0x43, 0xED, 0xCF, 0xAC, 0x62, </span><br><span class="hljs-emphasis">    0xE4, 0xB3, 0x1C, 0xA9, 0xC9, 0x08, 0xE8, 0x95, 0x80, 0xDF, 0x94, 0xFA, 0x75, 0x8F, 0x3F, 0xA6, </span><br><span class="hljs-emphasis">    0x47, 0x07, 0xA7, 0xFC, 0xF3, 0x73, 0x17, 0xBA, 0x83, 0x59, 0x3C, 0x19, 0xE6, 0x85, 0x4F, 0xA8, </span><br><span class="hljs-emphasis">    0x68, 0x6B, 0x81, 0xB2, 0x71, 0x64, 0xDA, 0x8B, 0xF8, 0xEB, 0x0F, 0x4B, 0x70, 0x56, 0x9D, 0x35,</span><br><span class="hljs-emphasis">    0x1E, 0x24, 0x0E, 0x5E, 0x63, 0x58, 0xD1, 0xA2, 0x25, 0x22, 0x7C, 0x3B, 0x01, 0x21, 0x78, 0x87, </span><br><span class="hljs-emphasis">    0xD4, 0x00, 0x46, 0x57, 0x9F, 0xD3, 0x27, 0x52, 0x4C, 0x36, 0x02, 0xE7, 0xA0, 0xC4, 0xC8, 0x9E, </span><br><span class="hljs-emphasis">    0xEA, 0xBF, 0x8A, 0xD2, 0x40, 0xC7, 0x38, 0xB5, 0xA3, 0xF7, 0xF2, 0xCE, 0xF9, 0x61, 0x15, 0xA1, </span><br><span class="hljs-emphasis">    0xE0, 0xAE, 0x5D, 0xA4, 0x9B, 0x34, 0x1A, 0x55, 0xAD, 0x93, 0x32, 0x30, 0xF5, 0x8C, 0xB1, 0xE3, </span><br><span class="hljs-emphasis">    0x1D, 0xF6, 0xE2, 0x2E, 0x82, 0x66, 0xCA, 0x60, 0xC0, 0x29, 0x23, 0xAB, 0x0D, 0x53, 0x4E, 0x6F, </span><br><span class="hljs-emphasis">    0xD5, 0xDB, 0x37, 0x45, 0xDE, 0xFD, 0x8E, 0x2F, 0x03, 0xFF, 0x6A, 0x72, 0x6D, 0x6C, 0x5B, 0x51, </span><br><span class="hljs-emphasis">    0x8D, 0x1B, 0xAF, 0x92, 0xBB, 0xDD, 0xBC, 0x7F, 0x11, 0xD9, 0x5C, 0x41, 0x1F, 0x10, 0x5A, 0xD8, </span><br><span class="hljs-emphasis">    0x0A, 0xC1, 0x31, 0x88, 0xA5, 0xCD, 0x7B, 0xBD, 0x2D, 0x74, 0xD0, 0x12, 0xB8, 0xE5, 0xB4, 0xB0,</span><br><span class="hljs-emphasis">    0x89, 0x69, 0x97, 0x4A, 0x0C, 0x96, 0x77, 0x7E, 0x65, 0xB9, 0xF1, 0x09, 0xC5, 0x6E, 0xC6, 0x84, </span><br><span class="hljs-emphasis">    0x18, 0xF0, 0x7D, 0xEC, 0x3A, 0xDC, 0x4D, 0x20, 0x79, 0xEE, 0x5F, 0x3E, 0xD7, 0xCB, 0x39, 0x48</span><br><span class="hljs-emphasis">&#125;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">b) 轮密钥扩展时存在常数CK和FK</code></pre><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown">CK[32]=&#123;<br><span class="hljs-code">    0x00070e15, 0x1c232a31, 0x383f64d,  0x545b6269,</span><br><span class="hljs-code">    0x70777e85, 0x8c939aa1, 0xa8afb6bd, 0xc4cbd2d9,</span><br><span class="hljs-code">    0xe0e7eef5, 0xfc030a11, 0x181f262d, 0x343b4249,</span><br><span class="hljs-code">    0x50575e65, 0x6c737a81, 0x88f969d,  0xa4abb2b9,</span><br><span class="hljs-code">    0xc0c7ced5, 0xdce3eafl, 0xf8ff060d, 0x141b2229,</span><br><span class="hljs-code">    0x30373e45, 0x4c535a61, 0x686f767d, 0x848b9299,</span><br><span class="hljs-code">    0xa0a7aeb5, 0xbcc3cad1, 0xd8dfe6ed, 0xf4fb0209,</span><br><span class="hljs-code">    0x10171e25, 0x2c333a41, 0x484f565d, 0x646b7279</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code">FK0=(A3B1BAC6)，FK1=(56AA3350),FK2=(677D9197), FK3=(B27022DC)</span><br></code></pre></td></tr></table></figure><h4 id="b-解密脚本-1"><a href="#b-解密脚本-1" class="headerlink" title="b.解密脚本"></a>b.解密脚本</h4><p>在github上下载python库进行解密即可&#x2F;在线解密&#x2F;找脚本</p><p><a href="https://github.com/yang3yen/pysm4">https://github.com/yang3yen/pysm4</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> pysm4 <span class="hljs-keyword">import</span> encrypt, decrypt<br><span class="hljs-comment"># 明文</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>clear_num = <span class="hljs-number">0x0123456789abcdeffedcba9876543210</span><br><span class="hljs-comment"># 密钥</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>mk = <span class="hljs-number">0x0123456789abcdeffedcba9876543210</span><br><span class="hljs-comment"># 加密</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>cipher_num = encrypt(clear_num, mk)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">hex</span>(cipher_num)[<span class="hljs-number">2</span>:].replace(<span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-string">&#x27;681edf34d206965e86b3e94f536e4246&#x27;</span><br><span class="hljs-comment"># 解密</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>clear_num == decrypt(cipher_num, mk)<br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
